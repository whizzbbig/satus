/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js ***!
  \******************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ SerwistError; },\n/* harmony export */   a: function() { return /* binding */ canConstructResponseFromBodyStream; },\n/* harmony export */   c: function() { return /* binding */ cacheNames; },\n/* harmony export */   f: function() { return /* binding */ finalAssertExports; },\n/* harmony export */   l: function() { return /* binding */ logger; },\n/* harmony export */   q: function() { return /* binding */ quotaErrorCallbacks; }\n/* harmony export */ });\nconst _cacheNameDetails = {\n    googleAnalytics: \"googleAnalytics\",\n    precache: \"precache-v2\",\n    prefix: \"serwist\",\n    runtime: \"runtime\",\n    suffix: typeof registration !== \"undefined\" ? registration.scope : \"\"\n};\nconst _createCacheName = (cacheName)=>{\n    return [\n        _cacheNameDetails.prefix,\n        cacheName,\n        _cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join(\"-\");\n};\nconst eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys(_cacheNameDetails)){\n        fn(key);\n    }\n};\nconst cacheNames = {\n    updateDetails: (details)=>{\n        eachCacheNameDetail((key)=>{\n            const detail = details[key];\n            if (typeof detail === \"string\") {\n                _cacheNameDetails[key] = detail;\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return _cacheNameDetails.suffix;\n    }\n};\n\nconst messages = {\n    \"invalid-value\": ({ paramName, validValueDescription, value })=>{\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    \"not-an-array\": ({ moduleName, className, funcName, paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    \"incorrect-type\": ({ expectedType, paramName, moduleName, className, funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    \"incorrect-class\": ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        if (isReturnValueProblem) {\n            return `The return value from '${moduleName}.${classNameStr}${funcName}()' must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    \"missing-a-method\": ({ expectedMethod, paramName, moduleName, className, funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    \"add-to-cache-list-unexpected-type\": ({ entry })=>{\n        return `An unexpected entry was passed to '@serwist/precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(entry)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`;\n    },\n    \"add-to-cache-list-conflicting-entries\": ({ firstEntry, secondEntry })=>{\n        if (!firstEntry || !secondEntry) {\n            throw new Error(\"Unexpected input to \" + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to '@serwist/precaching.PrecacheController.addToCacheList()' had the URL ${firstEntry} but different revision details. Serwist is unable to cache and version the asset correctly. Please remove one of the entries.`;\n    },\n    \"plugin-error-request-will-fetch\": ({ thrownErrorMessage })=>{\n        if (!thrownErrorMessage) {\n            throw new Error(\"Unexpected input to \" + `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugin's 'requestWillFetch()' method. The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    \"invalid-cache-name\": ({ cacheNameId, value })=>{\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for setCacheDetails({${cacheNameId}: '...'}). Received a value of '${JSON.stringify(value)}'`;\n    },\n    \"unregister-route-but-not-found-with-method\": ({ method })=>{\n        if (!method) {\n            throw new Error(\"Unexpected input to \" + `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously registered for the method type '${method}'.`;\n    },\n    \"unregister-route-route-not-registered\": ()=>{\n        return `The route you're trying to unregister was not previously ` + \"registered.\";\n    },\n    \"queue-replay-failed\": ({ name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    \"duplicate-queue-name\": ({ name })=>{\n        return `The Queue name '${name}' is already being used. All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    \"expired-test-without-max-age\": ({ methodName, paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    \"unsupported-route-type\": ({ moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. Please check the docs for ${moduleName}.${className}.${funcName} for valid input types.`;\n    },\n    \"not-array-of-class\": ({ value, expectedClass, moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of '${expectedClass}' objects. Received '${JSON.stringify(value)},'. Please check the call to ${moduleName}.${className}.${funcName}() to fix the issue.`;\n    },\n    \"max-entries-or-age-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.maxEntries' or 'config.maxAgeSeconds' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"statuses-or-headers-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.statuses' or 'config.headers' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"invalid-string\": ({ moduleName, funcName, paramName })=>{\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${moduleName}.${funcName}() for more info.`;\n    },\n    \"channel-name-required\": ()=>{\n        return \"You must provide a channelName to construct a \" + \"BroadcastCacheUpdate instance.\";\n    },\n    \"invalid-responses-are-same-args\": ()=>{\n        return \"The arguments passed into responsesAreSame() appear to be \" + \"invalid. Please ensure valid Responses are used.\";\n    },\n    \"expire-custom-caches-only\": ()=>{\n        return `You must provide a 'cacheName' property when using the ` + \"expiration plugin with a runtime caching strategy.\";\n    },\n    \"unit-must-be-bytes\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"single-range-only\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"invalid-range-values\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"no-range-header\": ()=>{\n        return \"No Range header was found in the Request provided.\";\n    },\n    \"range-not-satisfiable\": ({ size, start, end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    \"attempt-to-cache-non-get-request\": ({ url, method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and only 'GET' requests can be cached.`;\n    },\n    \"cache-put-with-no-response\": ({ url })=>{\n        return `There was an attempt to cache '${url}' but the response was not defined.`;\n    },\n    \"no-response\": ({ url, error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    \"bad-precaching-response\": ({ url, status })=>{\n        return `The precaching request for '${url}' failed${status ? ` with an HTTP status of ${status}.` : \".\"}`;\n    },\n    \"non-precached-url\": ({ url })=>{\n        return `'createHandlerBoundToURL(\"${url}\")' was called, but that URL is not precached. Please pass in a URL that is precached instead.`;\n    },\n    \"add-to-cache-list-conflicting-integrities\": ({ url })=>{\n        return `Two of the entries passed to '@serwist/precaching.PrecacheController.addToCacheList()' had the URL ${url} with different integrity values. Please remove one of them.`;\n    },\n    \"missing-precache-entry\": ({ cacheName, url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    \"cross-origin-copy-response\": ({ origin })=>{\n        return `'@serwist/core.copyResponse()' can only be used with same-origin responses. It was passed a response with origin ${origin}.`;\n    },\n    \"opaque-streams-source\": ({ type })=>{\n        const message = `One of the '@serwist/streams' sources resulted in an '${type}' response.`;\n        if (type === \"opaqueredirect\") {\n            return `${message} Please do not use a navigation request that results in a redirect as a source.`;\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\nconst fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {})=>{\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nconst messageGenerator =  false ? 0 : generatorFunction;\n\nclass SerwistError extends Error {\n    details;\n    constructor(errorCode, details){\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\nlet supportStatus;\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response(\"\");\n        if (\"body\" in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            } catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\n\nconst isArray = (value, details)=>{\n    if (!Array.isArray(value)) {\n        throw new SerwistError(\"not-an-array\", details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== \"function\") {\n        details.expectedMethod = expectedMethod;\n        throw new SerwistError(\"missing-a-method\", details);\n    }\n};\nconst isType = (object, expectedType, details)=>{\n    if (typeof object !== expectedType) {\n        details.expectedType = expectedType;\n        throw new SerwistError(\"incorrect-type\", details);\n    }\n};\nconst isInstance = (object, expectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details.expectedClassName = expectedClass.name;\n        throw new SerwistError(\"incorrect-class\", details);\n    }\n};\nconst isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details.validValueDescription = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new SerwistError(\"invalid-value\", details);\n    }\n};\nconst isArrayOfClass = (value, expectedClass, details)=>{\n    const error = new SerwistError(\"not-array-of-class\", details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value){\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports =  false ? 0 : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass\n};\n\nconst logger =  false ? 0 : (()=>{\n    if (!(\"__WB_DISABLE_DEV_LOGS\" in globalThis)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: \"#7f8c8d\",\n        log: \"#2ecc71\",\n        warn: \"#f39c12\",\n        error: \"#c0392b\",\n        groupCollapsed: \"#3498db\",\n        groupEnd: null\n    };\n    const print = (method, args)=>{\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === \"groupCollapsed\") {\n            if (typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            \"border-radius: 0.5em\",\n            \"color: white\",\n            \"font-weight: bold\",\n            \"padding: 2px 0.5em\"\n        ];\n        const logPrefix = inGroup ? [] : [\n            \"%cserwist\",\n            styles.join(\";\")\n        ];\n        console[method](...logPrefix, ...args);\n        if (method === \"groupCollapsed\") {\n            inGroup = true;\n        }\n        if (method === \"groupEnd\") {\n            inGroup = false;\n        }\n    };\n    const loggerMethods = Object.keys(methodToColorMap);\n    return loggerMethods.reduce((api, method)=>{\n        api[method] = (...args)=>{\n            print(method, args);\n        };\n        return api;\n    }, {});\n})();\n\nconst quotaErrorCallbacks = new Set();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: function() { return /* binding */ Deferred; },\n/* harmony export */   SerwistError: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S; },\n/* harmony export */   assert: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.f; },\n/* harmony export */   cacheMatchIgnoreParams: function() { return /* binding */ cacheMatchIgnoreParams; },\n/* harmony export */   canConstructReadableStream: function() { return /* binding */ canConstructReadableStream; },\n/* harmony export */   canConstructResponseFromBodyStream: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.a; },\n/* harmony export */   dontWaitFor: function() { return /* binding */ dontWaitFor; },\n/* harmony export */   executeQuotaErrorCallbacks: function() { return /* binding */ executeQuotaErrorCallbacks; },\n/* harmony export */   getFriendlyURL: function() { return /* binding */ getFriendlyURL; },\n/* harmony export */   logger: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l; },\n/* harmony export */   privateCacheNames: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c; },\n/* harmony export */   resultingClientExists: function() { return /* binding */ resultingClientExists; },\n/* harmony export */   timeout: function() { return /* binding */ timeout; },\n/* harmony export */   waitUntil: function() { return /* binding */ waitUntil; }\n/* harmony export */ });\n/* harmony import */ var _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/quotaErrorCallbacks.js */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js\");\n\n\n\nclass Deferred {\n    promise;\n    resolve;\n    reject;\n    constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams){\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    const keysOptions = {\n        ...matchOptions,\n        ignoreSearch: true\n    };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\n\nlet supportStatus;\nfunction canConstructReadableStream() {\n    if (supportStatus === undefined) {\n        try {\n            new ReadableStream({\n                start () {}\n            });\n            supportStatus = true;\n        } catch (error) {\n            supportStatus = false;\n        }\n    }\n    return supportStatus;\n}\n\nfunction dontWaitFor(promise) {\n    void promise.then(()=>{});\n}\n\nconst executeQuotaErrorCallbacks = async ()=>{\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`About to run ${_chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.q.size} callbacks to clean up caches.`);\n    }\n    for (const callback of _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.q){\n        await callback();\n        if (true) {\n            _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(callback, \"is complete.\");\n        }\n    }\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Finished running callbacks.\");\n    }\n};\n\nconst getFriendlyURL = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), \"\");\n};\n\nfunction timeout(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\nconst MAX_RETRY_TIME = 2000;\nasync function resultingClientExists(resultingClientId) {\n    if (!resultingClientId) {\n        return;\n    }\n    let existingWindows = await self.clients.matchAll({\n        type: \"window\"\n    });\n    const existingWindowIds = new Set(existingWindows.map((w)=>w.id));\n    let resultingWindow = undefined;\n    const startTime = performance.now();\n    while(performance.now() - startTime < MAX_RETRY_TIME){\n        existingWindows = await self.clients.matchAll({\n            type: \"window\"\n        });\n        resultingWindow = existingWindows.find((w)=>{\n            if (resultingClientId) {\n                return w.id === resultingClientId;\n            }\n            return !existingWindowIds.has(w.id);\n        });\n        if (resultingWindow) {\n            break;\n        }\n        await timeout(100);\n    }\n    return resultingWindow;\n}\n\nconst waitUntil = (event, asyncFn)=>{\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlcndpc3QrY29yZUA5LjAuMC1wcmV2aWV3LjIxX3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5pbnRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Y7QUFDMEQ7O0FBRWxKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1Qjs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSw2REFBTSxxQkFBcUIsNkRBQW1CLE9BQU87QUFDN0Q7QUFDQSwyQkFBMkIsNkRBQW1CO0FBQzlDO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDZEQUFNO0FBQ2xCO0FBQ0E7QUFDQSxRQUFRLElBQXFDO0FBQzdDLFFBQVEsNkRBQU07QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBOEMsZ0JBQWdCO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVvTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlcndpc3QrY29yZUA5LjAuMC1wcmV2aWV3LjIxX3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5pbnRlcm5hbC5qcz9kZWMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGwgYXMgbG9nZ2VyLCBxIGFzIHF1b3RhRXJyb3JDYWxsYmFja3MgfSBmcm9tICcuL2NodW5rcy9xdW90YUVycm9yQ2FsbGJhY2tzLmpzJztcbmV4cG9ydCB7IFMgYXMgU2Vyd2lzdEVycm9yLCBmIGFzIGFzc2VydCwgYSBhcyBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtLCBjIGFzIHByaXZhdGVDYWNoZU5hbWVzIH0gZnJvbSAnLi9jaHVua3MvcXVvdGFFcnJvckNhbGxiYWNrcy5qcyc7XG5cbmNsYXNzIERlZmVycmVkIHtcbiAgICBwcm9taXNlO1xuICAgIHJlc29sdmU7XG4gICAgcmVqZWN0O1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBQYXJhbXMoZnVsbFVSTCwgaWdub3JlUGFyYW1zKSB7XG4gICAgY29uc3Qgc3RyaXBwZWRVUkwgPSBuZXcgVVJMKGZ1bGxVUkwpO1xuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgaWdub3JlUGFyYW1zKXtcbiAgICAgICAgc3RyaXBwZWRVUkwuc2VhcmNoUGFyYW1zLmRlbGV0ZShwYXJhbSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpcHBlZFVSTC5ocmVmO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FjaGVNYXRjaElnbm9yZVBhcmFtcyhjYWNoZSwgcmVxdWVzdCwgaWdub3JlUGFyYW1zLCBtYXRjaE9wdGlvbnMpIHtcbiAgICBjb25zdCBzdHJpcHBlZFJlcXVlc3RVUkwgPSBzdHJpcFBhcmFtcyhyZXF1ZXN0LnVybCwgaWdub3JlUGFyYW1zKTtcbiAgICBpZiAocmVxdWVzdC51cmwgPT09IHN0cmlwcGVkUmVxdWVzdFVSTCkge1xuICAgICAgICByZXR1cm4gY2FjaGUubWF0Y2gocmVxdWVzdCwgbWF0Y2hPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3Qga2V5c09wdGlvbnMgPSB7XG4gICAgICAgIC4uLm1hdGNoT3B0aW9ucyxcbiAgICAgICAgaWdub3JlU2VhcmNoOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCBjYWNoZUtleXMgPSBhd2FpdCBjYWNoZS5rZXlzKHJlcXVlc3QsIGtleXNPcHRpb25zKTtcbiAgICBmb3IgKGNvbnN0IGNhY2hlS2V5IG9mIGNhY2hlS2V5cyl7XG4gICAgICAgIGNvbnN0IHN0cmlwcGVkQ2FjaGVLZXlVUkwgPSBzdHJpcFBhcmFtcyhjYWNoZUtleS51cmwsIGlnbm9yZVBhcmFtcyk7XG4gICAgICAgIGlmIChzdHJpcHBlZFJlcXVlc3RVUkwgPT09IHN0cmlwcGVkQ2FjaGVLZXlVUkwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZS5tYXRjaChjYWNoZUtleSwgbWF0Y2hPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG59XG5cbmxldCBzdXBwb3J0U3RhdHVzO1xuZnVuY3Rpb24gY2FuQ29uc3RydWN0UmVhZGFibGVTdHJlYW0oKSB7XG4gICAgaWYgKHN1cHBvcnRTdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgICAgICBzdGFydCAoKSB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdXBwb3J0U3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHN1cHBvcnRTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydFN0YXR1cztcbn1cblxuZnVuY3Rpb24gZG9udFdhaXRGb3IocHJvbWlzZSkge1xuICAgIHZvaWQgcHJvbWlzZS50aGVuKCgpPT57fSk7XG59XG5cbmNvbnN0IGV4ZWN1dGVRdW90YUVycm9yQ2FsbGJhY2tzID0gYXN5bmMgKCk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGxvZ2dlci5sb2coYEFib3V0IHRvIHJ1biAke3F1b3RhRXJyb3JDYWxsYmFja3Muc2l6ZX0gY2FsbGJhY2tzIHRvIGNsZWFuIHVwIGNhY2hlcy5gKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBxdW90YUVycm9yQ2FsbGJhY2tzKXtcbiAgICAgICAgYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhjYWxsYmFjaywgXCJpcyBjb21wbGV0ZS5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBsb2dnZXIubG9nKFwiRmluaXNoZWQgcnVubmluZyBjYWxsYmFja3MuXCIpO1xuICAgIH1cbn07XG5cbmNvbnN0IGdldEZyaWVuZGx5VVJMID0gKHVybCk9PntcbiAgICBjb25zdCB1cmxPYmogPSBuZXcgVVJMKFN0cmluZyh1cmwpLCBsb2NhdGlvbi5ocmVmKTtcbiAgICByZXR1cm4gdXJsT2JqLmhyZWYucmVwbGFjZShuZXcgUmVnRXhwKGBeJHtsb2NhdGlvbi5vcmlnaW59YCksIFwiXCIpO1xufTtcblxuZnVuY3Rpb24gdGltZW91dChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PnNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuY29uc3QgTUFYX1JFVFJZX1RJTUUgPSAyMDAwO1xuYXN5bmMgZnVuY3Rpb24gcmVzdWx0aW5nQ2xpZW50RXhpc3RzKHJlc3VsdGluZ0NsaWVudElkKSB7XG4gICAgaWYgKCFyZXN1bHRpbmdDbGllbnRJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBleGlzdGluZ1dpbmRvd3MgPSBhd2FpdCBzZWxmLmNsaWVudHMubWF0Y2hBbGwoe1xuICAgICAgICB0eXBlOiBcIndpbmRvd1wiXG4gICAgfSk7XG4gICAgY29uc3QgZXhpc3RpbmdXaW5kb3dJZHMgPSBuZXcgU2V0KGV4aXN0aW5nV2luZG93cy5tYXAoKHcpPT53LmlkKSk7XG4gICAgbGV0IHJlc3VsdGluZ1dpbmRvdyA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB3aGlsZShwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZSA8IE1BWF9SRVRSWV9USU1FKXtcbiAgICAgICAgZXhpc3RpbmdXaW5kb3dzID0gYXdhaXQgc2VsZi5jbGllbnRzLm1hdGNoQWxsKHtcbiAgICAgICAgICAgIHR5cGU6IFwid2luZG93XCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdGluZ1dpbmRvdyA9IGV4aXN0aW5nV2luZG93cy5maW5kKCh3KT0+e1xuICAgICAgICAgICAgaWYgKHJlc3VsdGluZ0NsaWVudElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHcuaWQgPT09IHJlc3VsdGluZ0NsaWVudElkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICFleGlzdGluZ1dpbmRvd0lkcy5oYXMody5pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0aW5nV2luZG93KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aW1lb3V0KDEwMCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRpbmdXaW5kb3c7XG59XG5cbmNvbnN0IHdhaXRVbnRpbCA9IChldmVudCwgYXN5bmNGbik9PntcbiAgICBjb25zdCByZXR1cm5Qcm9taXNlID0gYXN5bmNGbigpO1xuICAgIGV2ZW50LndhaXRVbnRpbChyZXR1cm5Qcm9taXNlKTtcbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbn07XG5cbmV4cG9ydCB7IERlZmVycmVkLCBjYWNoZU1hdGNoSWdub3JlUGFyYW1zLCBjYW5Db25zdHJ1Y3RSZWFkYWJsZVN0cmVhbSwgZG9udFdhaXRGb3IsIGV4ZWN1dGVRdW90YUVycm9yQ2FsbGJhY2tzLCBnZXRGcmllbmRseVVSTCwgbG9nZ2VyLCByZXN1bHRpbmdDbGllbnRFeGlzdHMsIHRpbWVvdXQsIHdhaXRVbnRpbCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheNames: function() { return /* binding */ cacheNames; },\n/* harmony export */   clientsClaim: function() { return /* binding */ clientsClaim; },\n/* harmony export */   copyResponse: function() { return /* binding */ copyResponse; },\n/* harmony export */   registerQuotaErrorCallback: function() { return /* binding */ registerQuotaErrorCallback; },\n/* harmony export */   setCacheNameDetails: function() { return /* binding */ setCacheNameDetails; }\n/* harmony export */ });\n/* harmony import */ var _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/quotaErrorCallbacks.js */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js\");\n\n\nconst cacheNames = {\n    get googleAnalytics () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getGoogleAnalyticsName();\n    },\n    get precache () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrecacheName();\n    },\n    get prefix () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrefix();\n    },\n    get runtime () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getRuntimeName();\n    },\n    get suffix () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getSuffix();\n    }\n};\n\nconst clientsClaim = ()=>{\n    self.addEventListener(\"activate\", ()=>self.clients.claim());\n};\n\nconst copyResponse = async (response, modifier)=>{\n    let origin = null;\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"cross-origin-copy-response\", {\n            origin\n        });\n    }\n    const clonedResponse = response.clone();\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText\n    };\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    const body = (0,_chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.a)() ? clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n};\n\nconst registerQuotaErrorCallback = (callback)=>{\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(callback, \"function\", {\n            moduleName: \"@serwist/core\",\n            funcName: \"register\",\n            paramName: \"callback\"\n        });\n    }\n    _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.q.add(callback);\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Registered a callback to respond to quota errors.\", callback);\n    }\n};\n\nconst setCacheNameDetails = (details)=>{\n    if (true) {\n        for (const key of Object.keys(details)){\n            _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(details[key], \"string\", {\n                moduleName: \"@serwist/core\",\n                funcName: \"setCacheNameDetails\",\n                paramName: `details.${key}`\n            });\n        }\n        if (details.precache?.length === 0) {\n            throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"precache\",\n                value: details.precache\n            });\n        }\n        if (details.runtime?.length === 0) {\n            throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"runtime\",\n                value: details.runtime\n            });\n        }\n        if (details.googleAnalytics?.length === 0) {\n            throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"googleAnalytics\",\n                value: details.googleAnalytics\n            });\n        }\n    }\n    _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.updateDetails(details);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlcndpc3QrY29yZUA5LjAuMC1wcmV2aWV3LjIxX3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ007O0FBRWhNO0FBQ0E7QUFDQSxlQUFlLDZEQUFZO0FBQzNCLEtBQUs7QUFDTDtBQUNBLGVBQWUsNkRBQVk7QUFDM0IsS0FBSztBQUNMO0FBQ0EsZUFBZSw2REFBWTtBQUMzQixLQUFLO0FBQ0w7QUFDQSxlQUFlLDZEQUFZO0FBQzNCLEtBQUs7QUFDTDtBQUNBLGVBQWUsNkRBQVk7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkRBQVk7QUFDOUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpRUFBa0M7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSw2REFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsSUFBSSw2REFBbUI7QUFDdkIsUUFBUSxJQUFxQztBQUM3QyxRQUFRLDZEQUFNO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0M7QUFDQSxZQUFZLDZEQUFrQjtBQUM5QjtBQUNBO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxzQkFBc0IsNkRBQVk7QUFDbEM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esc0JBQXNCLDZEQUFZO0FBQ2xDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHNCQUFzQiw2REFBWTtBQUNsQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxJQUFJLDZEQUFZO0FBQ2hCOztBQUVtRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlcndpc3QrY29yZUA5LjAuMC1wcmV2aWV3LjIxX3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5qcz9kNjA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGMgYXMgY2FjaGVOYW1lcyQxLCBTIGFzIFNlcndpc3RFcnJvciwgYSBhcyBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtLCBmIGFzIGZpbmFsQXNzZXJ0RXhwb3J0cywgcSBhcyBxdW90YUVycm9yQ2FsbGJhY2tzLCBsIGFzIGxvZ2dlciB9IGZyb20gJy4vY2h1bmtzL3F1b3RhRXJyb3JDYWxsYmFja3MuanMnO1xuXG5jb25zdCBjYWNoZU5hbWVzID0ge1xuICAgIGdldCBnb29nbGVBbmFseXRpY3MgKCkge1xuICAgICAgICByZXR1cm4gY2FjaGVOYW1lcyQxLmdldEdvb2dsZUFuYWx5dGljc05hbWUoKTtcbiAgICB9LFxuICAgIGdldCBwcmVjYWNoZSAoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWVzJDEuZ2V0UHJlY2FjaGVOYW1lKCk7XG4gICAgfSxcbiAgICBnZXQgcHJlZml4ICgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlTmFtZXMkMS5nZXRQcmVmaXgoKTtcbiAgICB9LFxuICAgIGdldCBydW50aW1lICgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlTmFtZXMkMS5nZXRSdW50aW1lTmFtZSgpO1xuICAgIH0sXG4gICAgZ2V0IHN1ZmZpeCAoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWVzJDEuZ2V0U3VmZml4KCk7XG4gICAgfVxufTtcblxuY29uc3QgY2xpZW50c0NsYWltID0gKCk9PntcbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJhY3RpdmF0ZVwiLCAoKT0+c2VsZi5jbGllbnRzLmNsYWltKCkpO1xufTtcblxuY29uc3QgY29weVJlc3BvbnNlID0gYXN5bmMgKHJlc3BvbnNlLCBtb2RpZmllcik9PntcbiAgICBsZXQgb3JpZ2luID0gbnVsbDtcbiAgICBpZiAocmVzcG9uc2UudXJsKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVVJMID0gbmV3IFVSTChyZXNwb25zZS51cmwpO1xuICAgICAgICBvcmlnaW4gPSByZXNwb25zZVVSTC5vcmlnaW47XG4gICAgfVxuICAgIGlmIChvcmlnaW4gIT09IHNlbGYubG9jYXRpb24ub3JpZ2luKSB7XG4gICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJjcm9zcy1vcmlnaW4tY29weS1yZXNwb25zZVwiLCB7XG4gICAgICAgICAgICBvcmlnaW5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNsb25lZFJlc3BvbnNlID0gcmVzcG9uc2UuY2xvbmUoKTtcbiAgICBjb25zdCByZXNwb25zZUluaXQgPSB7XG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKGNsb25lZFJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IGNsb25lZFJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogY2xvbmVkUmVzcG9uc2Uuc3RhdHVzVGV4dFxuICAgIH07XG4gICAgY29uc3QgbW9kaWZpZWRSZXNwb25zZUluaXQgPSBtb2RpZmllciA/IG1vZGlmaWVyKHJlc3BvbnNlSW5pdCkgOiByZXNwb25zZUluaXQ7XG4gICAgY29uc3QgYm9keSA9IGNhbkNvbnN0cnVjdFJlc3BvbnNlRnJvbUJvZHlTdHJlYW0oKSA/IGNsb25lZFJlc3BvbnNlLmJvZHkgOiBhd2FpdCBjbG9uZWRSZXNwb25zZS5ibG9iKCk7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShib2R5LCBtb2RpZmllZFJlc3BvbnNlSW5pdCk7XG59O1xuXG5jb25zdCByZWdpc3RlclF1b3RhRXJyb3JDYWxsYmFjayA9IChjYWxsYmFjayk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGZpbmFsQXNzZXJ0RXhwb3J0cy5pc1R5cGUoY2FsbGJhY2ssIFwiZnVuY3Rpb25cIiwge1xuICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9jb3JlXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJyZWdpc3RlclwiLFxuICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNhbGxiYWNrXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHF1b3RhRXJyb3JDYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJSZWdpc3RlcmVkIGEgY2FsbGJhY2sgdG8gcmVzcG9uZCB0byBxdW90YSBlcnJvcnMuXCIsIGNhbGxiYWNrKTtcbiAgICB9XG59O1xuXG5jb25zdCBzZXRDYWNoZU5hbWVEZXRhaWxzID0gKGRldGFpbHMpPT57XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkZXRhaWxzKSl7XG4gICAgICAgICAgICBmaW5hbEFzc2VydEV4cG9ydHMuaXNUeXBlKGRldGFpbHNba2V5XSwgXCJzdHJpbmdcIiwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvY29yZVwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcInNldENhY2hlTmFtZURldGFpbHNcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IGBkZXRhaWxzLiR7a2V5fWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRhaWxzLnByZWNhY2hlPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJpbnZhbGlkLWNhY2hlLW5hbWVcIiwge1xuICAgICAgICAgICAgICAgIGNhY2hlTmFtZUlkOiBcInByZWNhY2hlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRldGFpbHMucHJlY2FjaGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRhaWxzLnJ1bnRpbWU/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImludmFsaWQtY2FjaGUtbmFtZVwiLCB7XG4gICAgICAgICAgICAgICAgY2FjaGVOYW1lSWQ6IFwicnVudGltZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBkZXRhaWxzLnJ1bnRpbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRhaWxzLmdvb2dsZUFuYWx5dGljcz8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwiaW52YWxpZC1jYWNoZS1uYW1lXCIsIHtcbiAgICAgICAgICAgICAgICBjYWNoZU5hbWVJZDogXCJnb29nbGVBbmFseXRpY3NcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGV0YWlscy5nb29nbGVBbmFseXRpY3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhY2hlTmFtZXMkMS51cGRhdGVEZXRhaWxzKGRldGFpbHMpO1xufTtcblxuZXhwb3J0IHsgY2FjaGVOYW1lcywgY2xpZW50c0NsYWltLCBjb3B5UmVzcG9uc2UsIHJlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrLCBzZXRDYWNoZU5hbWVEZXRhaWxzIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+next@9.0.0-preview.21_next@14.2.1_typescript@5.4.5_webpack@5.91.0/node_modules/@serwist/next/dist/index.worker.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+next@9.0.0-preview.21_next@14.2.1_typescript@5.4.5_webpack@5.91.0/node_modules/@serwist/next/dist/index.worker.js ***!
  \*******************************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PAGES_CACHE_NAME: function() { return /* binding */ PAGES_CACHE_NAME; },\n/* harmony export */   defaultCache: function() { return /* binding */ defaultCache; }\n/* harmony export */ });\n/* harmony import */ var _serwist_sw_plugins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/sw/plugins */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.plugins.js\");\n/* harmony import */ var _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/sw/strategies */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.strategies.js\");\n\n\n\nconst PAGES_CACHE_NAME = {\n    rscPrefetch: \"pages-rsc-prefetch\",\n    rsc: \"pages-rsc\",\n    html: \"pages\"\n};\n\nconst defaultCache =  true ? [] : 0;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+next@9.0.0-preview.21_next@14.2.1_typescript@5.4.5_webpack@5.91.0/node_modules/@serwist/next/dist/index.worker.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/NetworkOnly.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/NetworkOnly.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N: function() { return /* binding */ NetworkOnly; },\n/* harmony export */   a: function() { return /* binding */ NetworkFirst; },\n/* harmony export */   c: function() { return /* binding */ cacheOkAndOpaquePlugin; },\n/* harmony export */   m: function() { return /* binding */ messages; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _Strategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Strategy.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n\n\n\nconst cacheOkAndOpaquePlugin = {\n    cacheWillUpdate: async ({ response })=>{\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    }\n};\n\nconst messages = {\n    strategyStart: (strategyName, request)=>`Using ${strategyName} to respond to '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}'`,\n    printFinalResponse: (response)=>{\n        if (response) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(\"View the final response here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(response || \"[No response returned]\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n    }\n};\n\nclass NetworkFirst extends _Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    _networkTimeoutSeconds;\n    constructor(options = {}){\n        super(options);\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (true) {\n            if (this._networkTimeoutSeconds) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(this._networkTimeoutSeconds, \"number\", {\n                    moduleName: \"@serwist/strategies\",\n                    className: this.constructor.name,\n                    funcName: \"constructor\",\n                    paramName: \"networkTimeoutSeconds\"\n                });\n            }\n        }\n    }\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"makeRequest\"\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({\n                request,\n                logs,\n                handler\n            });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async ()=>{\n            return await handler.waitUntil(Promise.race(promises)) || await networkPromise;\n        })());\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve)=>{\n            const onNetworkTimeout = async ()=>{\n                if (true) {\n                    logs.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId\n        };\n    }\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error = undefined;\n        let response = undefined;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        } catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (true) {\n            if (response) {\n                logs.push(\"Got response from network.\");\n            } else {\n                logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (true) {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n                } else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\n\nclass NetworkOnly extends _Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    _networkTimeoutSeconds;\n    constructor(options = {}){\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    async _handle(request, handler) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"_handle\",\n                paramName: \"request\"\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request)\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.timeout)(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`);\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Got response from network.\");\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Unable to get a response from the network.\");\n            }\n            messages.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js ***!
  \*****************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: function() { return /* binding */ BackgroundSyncPlugin; },\n/* harmony export */   P: function() { return /* binding */ PrecacheFallbackPlugin; },\n/* harmony export */   Q: function() { return /* binding */ Queue; },\n/* harmony export */   S: function() { return /* binding */ StorableRequest; },\n/* harmony export */   a: function() { return /* binding */ QueueStore; },\n/* harmony export */   i: function() { return /* binding */ initialize; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./singletonRouter.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n/* harmony import */ var _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NetworkOnly.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! idb */ \"./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js\");\n/* harmony import */ var _singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./singletonPrecacheController.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\");\n\n\n\n\n\n\nconst DB_VERSION = 3;\nconst DB_NAME = \"serwist-background-sync\";\nconst REQUEST_OBJECT_STORE_NAME = \"requests\";\nconst QUEUE_NAME_INDEX = \"queueName\";\nclass QueueDb {\n    _db = null;\n    async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.openCursor();\n        return cursor?.value.id;\n    }\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    async getEntryCountByQueueName(queueName) {\n        const db = await this.getDb();\n        return db.countFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n    }\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"next\");\n    }\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"prev\");\n    }\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.index(QUEUE_NAME_INDEX).openCursor(query, direction);\n        return cursor?.value;\n    }\n    async getDb() {\n        if (!this._db) {\n            this._db = await (0,idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb\n            });\n        }\n        return this._db;\n    }\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: \"id\"\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, {\n            unique: false\n        });\n    }\n}\n\nclass QueueStore {\n    _queueName;\n    _queueDb;\n    constructor(queueName){\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    async pushEntry(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry.requestData, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    async unshiftEntry(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry.requestData, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            entry.id = firstId - 1;\n        } else {\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    async size() {\n        return await this._queueDb.getEntryCountByQueueName(this._queueName);\n    }\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n\nconst serializableProperties = [\n    \"method\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"mode\",\n    \"credentials\",\n    \"cache\",\n    \"redirect\",\n    \"integrity\",\n    \"keepalive\"\n];\nclass StorableRequest {\n    _requestData;\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {}\n        };\n        if (request.method !== \"GET\") {\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        request.headers.forEach((value, key)=>{\n            requestData.headers[key] = value;\n        });\n        for (const prop of serializableProperties){\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    constructor(requestData){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(requestData, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(requestData.url, \"string\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData.url\"\n            });\n        }\n        if (requestData.mode === \"navigate\") {\n            requestData.mode = \"same-origin\";\n        }\n        this._requestData = requestData;\n    }\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\n\nconst TAG_PREFIX = \"serwist-background-sync\";\nconst MAX_RETENTION_TIME$1 = 60 * 24 * 7;\nconst queueNames = new Set();\nconst convertEntry = (queueStoreEntry)=>{\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\nclass Queue {\n    _name;\n    _onSync;\n    _maxRetentionTime;\n    _queueStore;\n    _forceSyncFallback;\n    _syncInProgress = false;\n    _requestsAddedDuringSync = false;\n    constructor(name, { forceSyncFallback, onSync, maxRetentionTime } = {}){\n        if (queueNames.has(name)) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"duplicate-queue-name\", {\n                name\n            });\n        }\n        queueNames.add(name);\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME$1;\n        this._forceSyncFallback = Boolean(forceSyncFallback);\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    get name() {\n        return this._name;\n    }\n    async pushRequest(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(entry.request, Request, {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"push\");\n    }\n    async unshiftRequest(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(entry.request, Request, {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"unshift\");\n    }\n    async popRequest() {\n        return this._removeRequest(\"pop\");\n    }\n    async shiftRequest() {\n        return this._removeRequest(\"shift\");\n    }\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries){\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            } else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    async size() {\n        return await this._queueStore.size();\n    }\n    async _addRequest({ request, metadata, timestamp = Date.now() }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp\n        };\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        switch(operation){\n            case \"push\":\n                await this._queueStore.pushEntry(entry);\n                break;\n            case \"unshift\":\n                await this._queueStore.unshiftEntry(entry);\n                break;\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}' has ` + `been added to background sync queue '${this._name}'.`);\n        }\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        } else {\n            await this.registerSync();\n        }\n    }\n    async _removeRequest(operation) {\n        const now = Date.now();\n        let entry;\n        switch(operation){\n            case \"pop\":\n                entry = await this._queueStore.popEntry();\n                break;\n            case \"shift\":\n                entry = await this._queueStore.shiftEntry();\n                break;\n        }\n        if (entry) {\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        return undefined;\n    }\n    async replayRequests() {\n        let entry = undefined;\n        while(entry = await this.shiftRequest()){\n            try {\n                await fetch(entry.request.clone());\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(entry.request.url)}' ` + `has been replayed in queue '${this._name}'`);\n                }\n            } catch (error) {\n                await this.unshiftRequest(entry);\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(entry.request.url)}' ` + `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"queue-replay-failed\", {\n                    name: this._name\n                });\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`);\n        }\n    }\n    async registerSync() {\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            } catch (err) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    _addSyncListener() {\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            self.addEventListener(\"sync\", (event)=>{\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Background sync for tag '${event.tag}' has been received`);\n                    }\n                    const syncComplete = async ()=>{\n                        this._syncInProgress = true;\n                        let syncError = undefined;\n                        try {\n                            await this._onSync({\n                                queue: this\n                            });\n                        } catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                throw syncError;\n                            }\n                        } finally{\n                            if (this._requestsAddedDuringSync && !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        } else {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Background sync replaying without background sync event\");\n            }\n            void this._onSync({\n                queue: this\n            });\n        }\n    }\n    static get _queueNames() {\n        return queueNames;\n    }\n}\n\nclass BackgroundSyncPlugin {\n    _queue;\n    constructor(name, options){\n        this._queue = new Queue(name, options);\n    }\n    async fetchDidFail({ request }) {\n        await this._queue.pushRequest({\n            request\n        });\n    }\n}\n\nconst QUEUE_NAME = \"serwist-google-analytics\";\nconst MAX_RETENTION_TIME = 60 * 48;\nconst GOOGLE_ANALYTICS_HOST = \"www.google-analytics.com\";\nconst GTM_HOST = \"www.googletagmanager.com\";\nconst ANALYTICS_JS_PATH = \"/analytics.js\";\nconst GTAG_JS_PATH = \"/gtag/js\";\nconst GTM_JS_PATH = \"/gtm.js\";\nconst COLLECT_PATHS_REGEX = /^\\/(\\w+\\/)?collect/;\n\nconst createOnSyncCallback = (config)=>{\n    return async ({ queue })=>{\n        let entry = undefined;\n        while(entry = await queue.shiftRequest()){\n            const { request, timestamp } = entry;\n            const url = new URL(request.url);\n            try {\n                const params = request.method === \"POST\" ? new URLSearchParams(await request.clone().text()) : url.searchParams;\n                const originalHitTime = timestamp - (Number(params.get(\"qt\")) || 0);\n                const queueTime = Date.now() - originalHitTime;\n                params.set(\"qt\", String(queueTime));\n                if (config.parameterOverrides) {\n                    for (const param of Object.keys(config.parameterOverrides)){\n                        const value = config.parameterOverrides[param];\n                        params.set(param, value);\n                    }\n                }\n                if (typeof config.hitFilter === \"function\") {\n                    config.hitFilter.call(null, params);\n                }\n                await fetch(new Request(url.origin + url.pathname, {\n                    body: params.toString(),\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"text/plain\"\n                    }\n                }));\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url.href)}' has been replayed`);\n                }\n            } catch (err) {\n                await queue.unshiftRequest(entry);\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url.href)}' failed to replay, putting it back in the queue.`);\n                }\n                throw err;\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"All Google Analytics request successfully replayed; \" + \"the queue is now empty!\");\n        }\n    };\n};\nconst createCollectRoutes = (bgSyncPlugin)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && COLLECT_PATHS_REGEX.test(url.pathname);\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.N({\n        plugins: [\n            bgSyncPlugin\n        ]\n    });\n    return [\n        new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\"),\n        new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"POST\")\n    ];\n};\nconst createAnalyticsJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && url.pathname === ANALYTICS_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheName\n    });\n    return new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\");\n};\nconst createGtagJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTAG_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheName\n    });\n    return new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\");\n};\nconst createGtmJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTM_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheName\n    });\n    return new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\");\n};\nconst initialize = ({ cacheName, router = (0,_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.g)(), ...options } = {})=>{\n    const resolvedCacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getGoogleAnalyticsName(cacheName);\n    const bgSyncPlugin = new BackgroundSyncPlugin(QUEUE_NAME, {\n        maxRetentionTime: MAX_RETENTION_TIME,\n        onSync: createOnSyncCallback(options)\n    });\n    const routes = [\n        createGtmJsRoute(resolvedCacheName),\n        createAnalyticsJsRoute(resolvedCacheName),\n        createGtagJsRoute(resolvedCacheName),\n        ...createCollectRoutes(bgSyncPlugin)\n    ];\n    for (const route of routes){\n        router.registerRoute(route);\n    }\n};\n\nclass PrecacheFallbackPlugin {\n    _fallbackUrls;\n    _precacheController;\n    constructor({ fallbackUrls, precacheController }){\n        this._fallbackUrls = fallbackUrls;\n        this._precacheController = precacheController || (0,_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_4__.g)();\n    }\n    async handlerDidError(param) {\n        for (const fallback of this._fallbackUrls){\n            if (typeof fallback === \"string\") {\n                const fallbackResponse = await this._precacheController.matchPrecache(fallback);\n                if (fallbackResponse !== undefined) {\n                    return fallbackResponse;\n                }\n            } else if (fallback.matcher(param)) {\n                const fallbackResponse = await this._precacheController.matchPrecache(fallback.url);\n                if (fallbackResponse !== undefined) {\n                    return fallbackResponse;\n                }\n            }\n        }\n        return undefined;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js ***!
  \***************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ Strategy; },\n/* harmony export */   a: function() { return /* binding */ StrategyHandler; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n\n\nfunction toRequest(input) {\n    return typeof input === \"string\" ? new Request(input) : input;\n}\nclass StrategyHandler {\n    event;\n    request;\n    url;\n    params;\n    _cacheKeys = {};\n    _strategy;\n    _handlerDeferred;\n    _extendLifetimePromises;\n    _plugins;\n    _pluginStateMap;\n    constructor(strategy, options){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: \"@serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.event\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(options.request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.request\"\n            });\n        }\n        this.event = options.event;\n        this.request = options.request;\n        if (options.url) {\n            this.url = options.url;\n            this.params = options.params;\n        }\n        this._strategy = strategy;\n        this._handlerDeferred = new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this._extendLifetimePromises = [];\n        this._plugins = [\n            ...strategy.plugins\n        ];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins){\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === \"navigate\" && event instanceof FetchEvent && event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Using a preloaded navigation response for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        const originalRequest = this.hasCallback(\"fetchDidFail\") ? request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks(\"requestWillFetch\")){\n                request = await cb({\n                    request: request.clone(),\n                    event\n                });\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"plugin-error-request-will-fetch\", {\n                    thrownErrorMessage: err.message\n                });\n            }\n        }\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            fetchResponse = await fetch(request, request.mode === \"navigate\" ? undefined : this._strategy.fetchOptions);\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Network request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}' returned a response with status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks(\"fetchDidSucceed\")){\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse\n                });\n            }\n            return fetchResponse;\n        } catch (error) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Network request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}' threw an error.`, error);\n            }\n            if (originalRequest) {\n                await this.runCallbacks(\"fetchDidFail\", {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone()\n                });\n            }\n            throw error;\n        }\n    }\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, \"read\");\n        const multiMatchOptions = {\n            ...matchOptions,\n            ...{\n                cacheName\n            }\n        };\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (true) {\n            if (cachedResponse) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Found a cached response in '${cacheName}'.`);\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cachedResponseWillBeUsed\")){\n            cachedResponse = await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event\n            }) || undefined;\n        }\n        return cachedResponse;\n    }\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.timeout)(0);\n        const effectiveRequest = await this.getCacheKey(request, \"write\");\n        if (true) {\n            if (effectiveRequest.method && effectiveRequest.method !== \"GET\") {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"attempt-to-cache-non-get-request\", {\n                    url: (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url),\n                    method: effectiveRequest.method\n                });\n            }\n        }\n        if (!response) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Cannot cache non-existent response for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)}'.`);\n            }\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"cache-put-with-no-response\", {\n                url: (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Response '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)}' will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        if (true) {\n            const vary = response.headers.get(\"Vary\");\n            if (vary && matchOptions?.ignoreVary !== true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)} has a 'Vary: ${vary}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        const hasCacheUpdateCallback = this.hasCallback(\"cacheDidUpdate\");\n        const oldResponse = hasCacheUpdateCallback ? await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.cacheMatchIgnoreParams)(cache, effectiveRequest.clone(), [\n            \"__WB_REVISION__\"\n        ], matchOptions) : null;\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Updating the '${cacheName}' cache with a new Response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        } catch (error) {\n            if (error instanceof Error) {\n                if (error.name === \"QuotaExceededError\") {\n                    await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.executeQuotaErrorCallbacks)();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cacheDidUpdate\")){\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event\n            });\n        }\n        return true;\n    }\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks(\"cacheKeyWillBeUsed\")){\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    params: this.params\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins){\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)){\n            await callback(param);\n        }\n    }\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins){\n            if (typeof plugin[name] === \"function\") {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param)=>{\n                    const statefulParam = {\n                        ...param,\n                        state\n                    };\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    async doneWaiting() {\n        let promise = undefined;\n        while(promise = this._extendLifetimePromises.shift()){\n            await promise;\n        }\n    }\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks(\"cacheWillUpdate\")){\n            responseToCache = await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n            }) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (true) {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`);\n                        } else {\n                            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The response for '${this.request.url}' returned a status code of '${response.status}' and won't be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\n\nclass Strategy {\n    cacheName;\n    plugins;\n    fetchOptions;\n    matchOptions;\n    constructor(options = {}){\n        this.cacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getRuntimeName(options.cacheName);\n        this.plugins = options.plugins || [];\n        this.fetchOptions = options.fetchOptions;\n        this.matchOptions = options.matchOptions;\n    }\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    handleAll(options) {\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === \"string\" ? new Request(options.request) : options.request;\n        const handler = new StrategyHandler(this, options.url ? {\n            event,\n            request,\n            url: options.url,\n            params: options.params\n        } : {\n            event,\n            request\n        });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        return [\n            responseDone,\n            handlerDone\n        ];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks(\"handlerWillStart\", {\n            event,\n            request\n        });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            if (response === undefined || response.type === \"error\") {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                    url: request.url\n                });\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks(\"handlerDidError\")){\n                    response = await callback({\n                        error,\n                        event,\n                        request\n                    });\n                    if (response !== undefined) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            if (true) {\n                throw _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`While responding to '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}', an ${error instanceof Error ? error.toString() : \"\"} error occurred. Using a fallback response provided by a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks(\"handlerWillRespond\")){\n            response = await callback({\n                event,\n                request,\n                response\n            });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response = undefined;\n        let error = undefined;\n        try {\n            response = await responseDone;\n        } catch (error) {}\n        try {\n            await handler.runCallbacks(\"handlerDidRespond\", {\n                event,\n                request,\n                response\n            });\n            await handler.doneWaiting();\n        } catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks(\"handlerDidComplete\", {\n            event,\n            request,\n            response,\n            error\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js ***!
  \**********************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: function() { return /* binding */ PrecacheController; },\n/* harmony export */   a: function() { return /* binding */ PrecacheStrategy; },\n/* harmony export */   g: function() { return /* binding */ getSingletonPrecacheController; },\n/* harmony export */   s: function() { return /* binding */ setSingletonPrecacheController; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _serwist_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/core */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.js\");\n/* harmony import */ var _Strategy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Strategy.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n\n\n\n\nconst parallel = async (limit, array, func)=>{\n    const work = array.map((item, index)=>({\n            index,\n            item\n        }));\n    const processor = async (res)=>{\n        const results = [];\n        while(true){\n            const next = work.pop();\n            if (!next) {\n                return res(results);\n            }\n            const result = await func(next.item);\n            results.push({\n                result: result,\n                index: next.index\n            });\n        }\n    };\n    const queues = Array.from({\n        length: limit\n    }, ()=>new Promise(processor));\n    const results = (await Promise.all(queues)).flat().sort((a, b)=>a.index < b.index ? -1 : 1).map((res)=>res.result);\n    return results;\n};\n\nclass PrecacheStrategy extends _Strategy_js__WEBPACK_IMPORTED_MODULE_2__.S {\n    _fallbackToNetwork;\n    static defaultPrecacheCacheabilityPlugin = {\n        async cacheWillUpdate ({ response }) {\n            if (!response || response.status >= 400) {\n                return null;\n            }\n            return response;\n        }\n    };\n    static copyRedirectedCacheableResponsesPlugin = {\n        async cacheWillUpdate ({ response }) {\n            return response.redirected ? await (0,_serwist_core__WEBPACK_IMPORTED_MODULE_1__.copyResponse)(response) : response;\n        }\n    };\n    constructor(options = {}){\n        options.cacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        if (handler.event && handler.event.type === \"install\") {\n            return await this._handleInstall(request, handler);\n        }\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response = undefined;\n        const params = handler.params || {};\n        if (this._fallbackToNetwork) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`The precached response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)} in ${this.cacheName} was not found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== \"no-cors\" ? integrityInRequest || integrityInManifest : undefined\n            }));\n            if (integrityInManifest && noIntegrityConflict && request.mode !== \"no-cors\") {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (true) {\n                    if (wasCached) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`A response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)} was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        } else {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"missing-precache-entry\", {\n                cacheName: this.cacheName,\n                url: request.url\n            });\n        }\n        if (true) {\n            const cacheKey = params.cacheKey || await handler.getCacheKey(request, \"read\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Precaching is responding to: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}`);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Serving the precached url: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(\"View request details here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(request);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(\"View response details here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"bad-precaching-response\", {\n                url: request.url,\n                status: response.status\n            });\n        }\n        return response;\n    }\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()){\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        } else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n    }\n}\n\nclass PrecacheCacheKeyPlugin {\n    _precacheController;\n    constructor({ precacheController }){\n        this._precacheController = precacheController;\n    }\n    cacheKeyWillBeUsed = async ({ request, params })=>{\n        const cacheKey = params?.cacheKey || this._precacheController.getCacheKeyForURL(request.url);\n        return cacheKey ? new Request(cacheKey, {\n            headers: request.headers\n        }) : request;\n    };\n}\n\nclass PrecacheInstallReportPlugin {\n    updatedURLs = [];\n    notUpdatedURLs = [];\n    handlerWillStart = async ({ request, state })=>{\n        if (state) {\n            state.originalRequest = request;\n        }\n    };\n    cachedResponseWillBeUsed = async ({ event, state, cachedResponse })=>{\n        if (event.type === \"install\") {\n            if (state?.originalRequest && state.originalRequest instanceof Request) {\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                } else {\n                    this.updatedURLs.push(url);\n                }\n            }\n        }\n        return cachedResponse;\n    };\n}\n\nconst REVISION_SEARCH_PARAM = \"__WB_REVISION__\";\nfunction createCacheKey(entry) {\n    if (!entry) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    if (typeof entry === \"string\") {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href\n    };\n}\n\nconst logGroup = (groupTitle, deletedURLs)=>{\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs){\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(url);\n    }\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n};\nfunction printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`During precaching cleanup, ${deletionCount} cached request${deletionCount === 1 ? \" was\" : \"s were\"} deleted.`);\n        logGroup(\"Deleted Cache Requests\", deletedURLs);\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n    }\n}\n\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(groupTitle);\n    for (const url of urls){\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(url);\n    }\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n}\nfunction printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? \"\" : \"s\"}.`;\n        if (alreadyPrecachedCount > 0) {\n            message += ` ${alreadyPrecachedCount} ` + `file${alreadyPrecachedCount === 1 ? \" is\" : \"s are\"} already cached.`;\n        }\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(message);\n        _nestedGroup(\"View newly precached URLs.\", urlsToPrecache);\n        _nestedGroup(\"View previously precached URLs.\", urlsAlreadyPrecached);\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n    }\n}\n\nclass PrecacheController {\n    _installAndActiveListenersAdded;\n    _concurrentPrecaching;\n    _strategy;\n    _urlsToCacheKeys = new Map();\n    _urlsToCacheModes = new Map();\n    _cacheKeysToIntegrities = new Map();\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, concurrentPrecaching = 1 } = {}){\n        this._concurrentPrecaching = concurrentPrecaching;\n        this._strategy = new PrecacheStrategy({\n            cacheName: _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({\n                    precacheController: this\n                })\n            ],\n            fallbackToNetwork\n        });\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    get strategy() {\n        return this._strategy;\n    }\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener(\"install\", this.install);\n            self.addEventListener(\"activate\", this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    addToCacheList(entries) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isArray(entries, {\n                moduleName: \"@serwist/precaching\",\n                className: \"PrecacheController\",\n                funcName: \"addToCacheList\",\n                paramName: \"entries\"\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries){\n            if (typeof entry === \"string\") {\n                urlsToWarnAbout.push(entry);\n            } else if (entry && !entry.integrity && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== \"string\" && entry.revision ? \"reload\" : \"default\";\n            if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-conflicting-entries\", {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey\n                });\n            }\n            if (typeof entry !== \"string\" && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-conflicting-integrities\", {\n                        url\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Serwist is precaching URLs without revision info: ${urlsToWarnAbout.join(\", \")}\\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;\n                if (false) {} else {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    install(event) {\n        return (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.waitUntil)(event, async ()=>{\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            await parallel(this._concurrentPrecaching, Array.from(this._urlsToCacheKeys.entries()), async ([url, cacheKey])=>{\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: \"same-origin\"\n                });\n                await Promise.all(this.strategy.handleAll({\n                    event,\n                    request,\n                    url: new URL(request.url),\n                    params: {\n                        cacheKey\n                    }\n                }));\n            });\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (true) {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return {\n                updatedURLs,\n                notUpdatedURLs\n            };\n        });\n    }\n    activate(event) {\n        return (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.waitUntil)(event, async ()=>{\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedCacheRequests = [];\n            for (const request of currentlyCachedRequests){\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedCacheRequests.push(request.url);\n                }\n            }\n            if (true) {\n                printCleanupDetails(deletedCacheRequests);\n            }\n            return {\n                deletedCacheRequests\n            };\n        });\n    }\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    getCachedURLs() {\n        return [\n            ...this._urlsToCacheKeys.keys()\n        ];\n    }\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"non-precached-url\", {\n                url\n            });\n        }\n        return (options)=>{\n            options.request = new Request(url);\n            options.params = {\n                cacheKey,\n                ...options.params\n            };\n            return this.strategy.handle(options);\n        };\n    }\n}\n\nlet defaultPrecacheController = undefined;\nconst getSingletonPrecacheController = ()=>{\n    if (!defaultPrecacheController) {\n        defaultPrecacheController = new PrecacheController();\n    }\n    return defaultPrecacheController;\n};\nconst setSingletonPrecacheController = (precacheController)=>{\n    defaultPrecacheController = precacheController;\n    return defaultPrecacheController;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonRouter.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonRouter.js ***!
  \**********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: function() { return /* binding */ Route; },\n/* harmony export */   a: function() { return /* binding */ RegExpRoute; },\n/* harmony export */   b: function() { return /* binding */ Router; },\n/* harmony export */   g: function() { return /* binding */ getSingletonRouter; },\n/* harmony export */   p: function() { return /* binding */ parseRoute; },\n/* harmony export */   s: function() { return /* binding */ setSingletonRouter; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n\n\nconst defaultMethod = \"GET\";\nconst validMethods = [\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\"\n];\n\nconst normalizeHandler = (handler)=>{\n    if (handler && typeof handler === \"object\") {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.hasMethod(handler, \"handle\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"handler\"\n            });\n        }\n        return handler;\n    }\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(handler, \"function\", {\n            moduleName: \"@serwist/routing\",\n            className: \"Route\",\n            funcName: \"constructor\",\n            paramName: \"handler\"\n        });\n    }\n    return {\n        handle: handler\n    };\n};\n\nclass Route {\n    handler;\n    match;\n    method;\n    catchHandler;\n    constructor(match, handler, method = defaultMethod){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(match, \"function\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"match\"\n            });\n            if (method) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isOneOf(method, validMethods, {\n                    paramName: \"method\"\n                });\n            }\n        }\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\n\nclass RegExpRoute extends Route {\n    constructor(regExp, handler, method){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(regExp, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"RegExpRoute\",\n                funcName: \"constructor\",\n                paramName: \"pattern\"\n            });\n        }\n        const match = ({ url })=>{\n            const result = regExp.exec(url.href);\n            if (!result) {\n                return;\n            }\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The regular expression '${regExp.toString()}' only partially matched against the cross-origin URL '${url.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\n\nconst parseRoute = (capture, handler, method)=>{\n    let route;\n    if (typeof capture === \"string\") {\n        const captureUrl = new URL(capture, location.href);\n        if (true) {\n            if (!(capture.startsWith(\"/\") || capture.startsWith(\"http\"))) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"invalid-string\", {\n                    moduleName: \"@serwist/routing\",\n                    funcName: \"registerRoute\",\n                    paramName: \"capture\"\n                });\n            }\n            const valueToCheck = capture.startsWith(\"http\") ? captureUrl.pathname : capture;\n            const wildcards = \"[*:?+]\";\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The '$capture' parameter contains an Express-style wildcard character (${wildcards}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url })=>{\n            if (true) {\n                if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`${capture} only partially matches the cross-origin URL ${url.toString()}. This route will only handle cross-origin requests if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        route = new Route(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n        route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === \"function\") {\n        route = new Route(capture, handler, method);\n    } else if (capture instanceof Route) {\n        route = capture;\n    } else {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"unsupported-route-type\", {\n            moduleName: \"@serwist/routing\",\n            funcName: \"registerRoute\",\n            paramName: \"capture\"\n        });\n    }\n    return route;\n};\n\nclass Router {\n    _routes;\n    _defaultHandlerMap;\n    _fetchListenerHandler = null;\n    _cacheListenerHandler = null;\n    _catchHandler;\n    constructor(){\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    get routes() {\n        return this._routes;\n    }\n    addFetchListener() {\n        if (!this._fetchListenerHandler) {\n            this._fetchListenerHandler = (event)=>{\n                const { request } = event;\n                const responsePromise = this.handleRequest({\n                    request,\n                    event\n                });\n                if (responsePromise) {\n                    event.respondWith(responsePromise);\n                }\n            };\n            self.addEventListener(\"fetch\", this._fetchListenerHandler);\n        }\n    }\n    removeFetchListener() {\n        if (this._fetchListenerHandler) {\n            self.removeEventListener(\"fetch\", this._fetchListenerHandler);\n            this._fetchListenerHandler = null;\n        }\n    }\n    addCacheListener() {\n        if (!this._cacheListenerHandler) {\n            this._cacheListenerHandler = (event)=>{\n                if (event.data && event.data.type === \"CACHE_URLS\") {\n                    const { payload } = event.data;\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"Caching URLs from the window\", payload.urlsToCache);\n                    }\n                    const requestPromises = Promise.all(payload.urlsToCache.map((entry)=>{\n                        if (typeof entry === \"string\") {\n                            entry = [\n                                entry\n                            ];\n                        }\n                        const request = new Request(...entry);\n                        return this.handleRequest({\n                            request,\n                            event\n                        });\n                    }));\n                    event.waitUntil(requestPromises);\n                    if (event.ports?.[0]) {\n                        void requestPromises.then(()=>event.ports[0].postMessage(true));\n                    }\n                }\n            };\n            self.addEventListener(\"message\", this._cacheListenerHandler);\n        }\n    }\n    removeCacheListener() {\n        if (this._cacheListenerHandler) {\n            self.removeEventListener(\"message\", this._cacheListenerHandler);\n        }\n    }\n    handleRequest({ request, event }) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"handleRequest\",\n                paramName: \"options.request\"\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith(\"http\")) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"Router only supports URLs that start with 'http'.\");\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url\n        });\n        let handler = route?.handler;\n        const debugMessages = [];\n        if (true) {\n            if (handler) {\n                debugMessages.push([\n                    \"Found a route to handle this request:\",\n                    route\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params\n                    ]);\n                }\n            }\n        }\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (true) {\n                debugMessages.push(`Failed to find a matching route. Falling back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`No route found for: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}`);\n            }\n            return;\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Router is responding to: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}`);\n            for (const msg of debugMessages){\n                if (Array.isArray(msg)) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(...msg);\n                } else {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(msg);\n                }\n            }\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({\n                url,\n                request,\n                event,\n                params\n            });\n        } catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        const catchHandler = route?.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err)=>{\n                if (catchHandler) {\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Error thrown when responding to:  ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}. Falling back to route's Catch Handler.`);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error thrown by:\", route);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(err);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({\n                            url,\n                            request,\n                            event,\n                            params\n                        });\n                    } catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Error thrown when responding to:  ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}. Falling back to global Catch Handler.`);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error thrown by:\", route);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(err);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({\n                        url,\n                        request,\n                        event\n                    });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes){\n            let params;\n            const matchResult = route.match({\n                url,\n                sameOrigin,\n                request,\n                event\n            });\n            if (matchResult) {\n                if (true) {\n                    if (matchResult instanceof Promise) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`While routing ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    params = undefined;\n                } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n                    params = undefined;\n                } else if (typeof matchResult === \"boolean\") {\n                    params = undefined;\n                }\n                return {\n                    route,\n                    params\n                };\n            }\n        }\n        return {};\n    }\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    registerCapture(capture, handler, method) {\n        const route = parseRoute(capture, handler, method);\n        this.registerRoute(route);\n        return route;\n    }\n    registerRoute(route) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(route, \"object\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.hasMethod(route, \"match\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(route.handler, \"object\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.hasMethod(route.handler, \"handle\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route.handler\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(route.method, \"string\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route.method\"\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        this._routes.get(route.method).push(route);\n    }\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"unregister-route-but-not-found-with-method\", {\n                method: route.method\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        } else {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"unregister-route-route-not-registered\");\n        }\n    }\n}\n\nlet defaultRouter = undefined;\nconst getSingletonRouter = ()=>{\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\nconst setSingletonRouter = (router)=>{\n    if (defaultRouter) {\n        defaultRouter.removeFetchListener();\n        defaultRouter.removeCacheListener();\n    }\n    defaultRouter = router;\n    defaultRouter.addFetchListener();\n    defaultRouter.addCacheListener();\n    return defaultRouter;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonRouter.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.plugins.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.plugins.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BROADCAST_UPDATE_DEFAULT_HEADERS: function() { return /* binding */ defaultHeadersToCheck; },\n/* harmony export */   BROADCAST_UPDATE_MESSAGE_META: function() { return /* binding */ CACHE_UPDATED_MESSAGE_META; },\n/* harmony export */   BROADCAST_UPDATE_MESSAGE_TYPE: function() { return /* binding */ CACHE_UPDATED_MESSAGE_TYPE; },\n/* harmony export */   BackgroundSyncPlugin: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.B; },\n/* harmony export */   BackgroundSyncQueue: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.Q; },\n/* harmony export */   BackgroundSyncQueueStore: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.a; },\n/* harmony export */   BroadcastCacheUpdate: function() { return /* binding */ BroadcastCacheUpdate; },\n/* harmony export */   BroadcastUpdatePlugin: function() { return /* binding */ BroadcastUpdatePlugin; },\n/* harmony export */   CacheExpiration: function() { return /* binding */ CacheExpiration; },\n/* harmony export */   CacheableResponse: function() { return /* binding */ CacheableResponse; },\n/* harmony export */   CacheableResponsePlugin: function() { return /* binding */ CacheableResponsePlugin; },\n/* harmony export */   ExpirationPlugin: function() { return /* binding */ ExpirationPlugin; },\n/* harmony export */   PrecacheFallbackPlugin: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.P; },\n/* harmony export */   RangeRequestsPlugin: function() { return /* binding */ RangeRequestsPlugin; },\n/* harmony export */   StorableRequest: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.S; },\n/* harmony export */   createPartialResponse: function() { return /* binding */ createPartialResponse; },\n/* harmony export */   initializeGoogleAnalytics: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.i; },\n/* harmony export */   responsesAreSame: function() { return /* binding */ responsesAreSame; }\n/* harmony export */ });\n/* harmony import */ var _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/PrecacheFallbackPlugin.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js\");\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! idb */ \"./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js\");\n/* harmony import */ var _serwist_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @serwist/core */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.js\");\n/* harmony import */ var _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/singletonRouter.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n/* harmony import */ var _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/NetworkOnly.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunks/Strategy.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n/* harmony import */ var _chunks_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunks/singletonPrecacheController.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\");\n\n\n\n\n\n\n\n\n\nconst CACHE_UPDATED_MESSAGE_TYPE = \"CACHE_UPDATED\";\nconst CACHE_UPDATED_MESSAGE_META = \"serwist-broadcast-update\";\nconst defaultNotifyAllClients = true;\nconst defaultHeadersToCheck = [\n    \"content-length\",\n    \"etag\",\n    \"last-modified\"\n];\n\nconst responsesAreSame = (firstResponse, secondResponse, headersToCheck)=>{\n    if (true) {\n        if (!(firstResponse instanceof Response && secondResponse instanceof Response)) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"invalid-responses-are-same-args\");\n        }\n    }\n    const atLeastOneHeaderAvailable = headersToCheck.some((header)=>{\n        return firstResponse.headers.has(header) && secondResponse.headers.has(header);\n    });\n    if (!atLeastOneHeaderAvailable) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Unable to determine where the response has been updated because none of the headers that would be checked are present.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Attempting to compare the following: \", firstResponse, secondResponse, headersToCheck);\n        }\n        return true;\n    }\n    return headersToCheck.every((header)=>{\n        const headerStateComparison = firstResponse.headers.has(header) === secondResponse.headers.has(header);\n        const headerValueComparison = firstResponse.headers.get(header) === secondResponse.headers.get(header);\n        return headerStateComparison && headerValueComparison;\n    });\n};\n\nconst isSafari = typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\nconst defaultPayloadGenerator = (data)=>{\n    return {\n        cacheName: data.cacheName,\n        updatedURL: data.request.url\n    };\n};\nclass BroadcastCacheUpdate {\n    _headersToCheck;\n    _generatePayload;\n    _notifyAllClients;\n    constructor({ generatePayload, headersToCheck, notifyAllClients } = {}){\n        this._headersToCheck = headersToCheck || defaultHeadersToCheck;\n        this._generatePayload = generatePayload || defaultPayloadGenerator;\n        this._notifyAllClients = notifyAllClients ?? defaultNotifyAllClients;\n    }\n    async notifyIfUpdated(options) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(options.cacheName, \"string\", {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"cacheName\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(options.newResponse, Response, {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"newResponse\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(options.request, Request, {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"request\"\n            });\n        }\n        if (!options.oldResponse) {\n            return;\n        }\n        if (!responsesAreSame(options.oldResponse, options.newResponse, this._headersToCheck)) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(\"Newer response found (and cached) for:\", options.request.url);\n            }\n            const messageData = {\n                type: CACHE_UPDATED_MESSAGE_TYPE,\n                meta: CACHE_UPDATED_MESSAGE_META,\n                payload: this._generatePayload(options)\n            };\n            if (options.request.mode === \"navigate\") {\n                let resultingClientId;\n                if (options.event instanceof FetchEvent) {\n                    resultingClientId = options.event.resultingClientId;\n                }\n                const resultingWin = await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.resultingClientExists)(resultingClientId);\n                if (!resultingWin || isSafari) {\n                    await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.timeout)(3500);\n                }\n            }\n            if (this._notifyAllClients) {\n                const windows = await self.clients.matchAll({\n                    type: \"window\"\n                });\n                for (const win of windows){\n                    win.postMessage(messageData);\n                }\n            } else {\n                if (options.event instanceof FetchEvent) {\n                    const client = await self.clients.get(options.event.clientId);\n                    client?.postMessage(messageData);\n                }\n            }\n        }\n    }\n}\n\nclass BroadcastUpdatePlugin {\n    _broadcastUpdate;\n    constructor(options){\n        this._broadcastUpdate = new BroadcastCacheUpdate(options);\n    }\n    cacheDidUpdate(options) {\n        void this._broadcastUpdate.notifyIfUpdated(options);\n    }\n}\n\nclass CacheableResponse {\n    _statuses;\n    _headers;\n    constructor(config = {}){\n        if (true) {\n            if (!(config.statuses || config.headers)) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"statuses-or-headers-required\", {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.statuses) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isArray(config.statuses, {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\",\n                    paramName: \"config.statuses\"\n                });\n            }\n            if (config.headers) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.headers, \"object\", {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\",\n                    paramName: \"config.headers\"\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        if (config.headers) {\n            this._headers = new Headers(config.headers);\n        }\n    }\n    isResponseCacheable(response) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(response, Response, {\n                moduleName: \"@serwist/cacheable-response\",\n                className: \"CacheableResponse\",\n                funcName: \"isResponseCacheable\",\n                paramName: \"response\"\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            for (const [headerName, headerValue] of this._headers.entries()){\n                if (response.headers.get(headerName) !== headerValue) {\n                    cacheable = false;\n                    break;\n                }\n            }\n        }\n        if (true) {\n            if (!cacheable) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(`The request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.getFriendlyURL)(response.url)}' returned a response that does not meet the criteria for being cached.`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View cacheability criteria here.\");\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Cacheable statuses: ${JSON.stringify(this._statuses)}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Cacheable headers: ${JSON.stringify(this._headers, null, 2)}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key)=>{\n                    logFriendlyHeaders[key] = value;\n                });\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View response status and headers here.\");\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Response status: ${response.status}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Response headers: ${JSON.stringify(logFriendlyHeaders, null, 2)}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View full response details here.\");\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(response.headers);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(response);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\n\nclass CacheableResponsePlugin {\n    _cacheableResponse;\n    constructor(config){\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n    cacheWillUpdate = async ({ response })=>{\n        if (this._cacheableResponse.isResponseCacheable(response)) {\n            return response;\n        }\n        return null;\n    };\n}\n\nconst DB_NAME = \"serwist-expiration\";\nconst CACHE_OBJECT_STORE = \"cache-entries\";\nconst normalizeURL = (unNormalizedUrl)=>{\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = \"\";\n    return url.href;\n};\nclass CacheTimestampsModel {\n    _cacheName;\n    _db = null;\n    constructor(cacheName){\n        this._cacheName = cacheName;\n    }\n    _getId(url) {\n        return `${this._cacheName}|${normalizeURL(url)}`;\n    }\n    _upgradeDb(db) {\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n            keyPath: \"id\"\n        });\n        objStore.createIndex(\"cacheName\", \"cacheName\", {\n            unique: false\n        });\n        objStore.createIndex(\"timestamp\", \"timestamp\", {\n            unique: false\n        });\n    }\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void (0,idb__WEBPACK_IMPORTED_MODULE_2__.deleteDB)(this._cacheName);\n        }\n    }\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            id: this._getId(url),\n            cacheName: this._cacheName,\n            url,\n            timestamp\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry?.timestamp;\n    }\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db.transaction(CACHE_OBJECT_STORE, \"readwrite\").store.index(\"timestamp\").openCursor(null, \"prev\");\n        const urlsDeleted = [];\n        let entriesNotDeletedCount = 0;\n        while(cursor){\n            const result = cursor.value;\n            if (result.cacheName === this._cacheName) {\n                if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                    cursor.delete();\n                    urlsDeleted.push(result.url);\n                } else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        return urlsDeleted;\n    }\n    async getDb() {\n        if (!this._db) {\n            this._db = await (0,idb__WEBPACK_IMPORTED_MODULE_2__.openDB)(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n            });\n        }\n        return this._db;\n    }\n}\n\nclass CacheExpiration {\n    _isRunning = false;\n    _rerunRequested = false;\n    _maxEntries;\n    _maxAgeSeconds;\n    _matchOptions;\n    _cacheName;\n    _timestampModel;\n    constructor(cacheName, config = {}){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(cacheName, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"CacheExpiration\",\n                funcName: \"constructor\",\n                paramName: \"cacheName\"\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"max-entries-or-age-required\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.maxEntries) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxEntries, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxEntries\"\n                });\n            }\n            if (config.maxAgeSeconds) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxAgeSeconds, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeSeconds\"\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ? Date.now() - this._maxAgeSeconds * 1000 : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired){\n            await cache.delete(url, this._matchOptions);\n        }\n        if (true) {\n            if (urlsExpired.length > 0) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(`Expired ${urlsExpired.length} ` + `${urlsExpired.length === 1 ? \"entry\" : \"entries\"} and removed ` + `${urlsExpired.length === 1 ? \"it\" : \"them\"} from the ` + `'${this._cacheName}' cache.`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Expired the following ${urlsExpired.length === 1 ? \"URL\" : \"URLs\"}:`);\n                for (const url of urlsExpired){\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`    ${url}`);\n                }\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Cache expiration ran and found no entries to remove.\");\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            void this.expireEntries();\n        }\n    }\n    async updateTimestamp(url) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(url, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"CacheExpiration\",\n                funcName: \"updateTimestamp\",\n                paramName: \"url\"\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (true) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"expired-test-without-max-age\", {\n                    methodName: \"isURLExpired\",\n                    paramName: \"maxAgeSeconds\"\n                });\n            }\n            return false;\n        }\n        const timestamp = await this._timestampModel.getTimestamp(url);\n        const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n        return timestamp !== undefined ? timestamp < expireOlderThan : true;\n    }\n    async delete() {\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Number.POSITIVE_INFINITY);\n    }\n}\n\nclass ExpirationPlugin {\n    _config;\n    _cacheExpirations;\n    constructor(config = {}){\n        if (true) {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"max-entries-or-age-required\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.maxEntries) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxEntries, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxEntries\"\n                });\n            }\n            if (config.maxAgeSeconds) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxAgeSeconds, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeSeconds\"\n                });\n            }\n            if (config.maxAgeFrom) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxAgeFrom, \"string\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeFrom\"\n                });\n            }\n        }\n        this._config = config;\n        this._cacheExpirations = new Map();\n        if (!this._config.maxAgeFrom) {\n            this._config.maxAgeFrom = \"last-fetched\";\n        }\n        if (this._config.purgeOnQuotaError) {\n            (0,_serwist_core__WEBPACK_IMPORTED_MODULE_3__.registerQuotaErrorCallback)(()=>this.deleteCacheAndMetadata());\n        }\n    }\n    _getCacheExpiration(cacheName) {\n        if (cacheName === _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.privateCacheNames.getRuntimeName()) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"expire-custom-caches-only\");\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    cachedResponseWillBeUsed({ event, cacheName, request, cachedResponse }) {\n        if (!cachedResponse) {\n            return null;\n        }\n        const isFresh = this._isResponseDateFresh(cachedResponse);\n        const cacheExpiration = this._getCacheExpiration(cacheName);\n        const isMaxAgeFromLastUsed = this._config.maxAgeFrom === \"last-used\";\n        const done = (async ()=>{\n            if (isMaxAgeFromLastUsed) {\n                await cacheExpiration.updateTimestamp(request.url);\n            }\n            await cacheExpiration.expireEntries();\n        })();\n        try {\n            event.waitUntil(done);\n        } catch (error) {\n            if (true) {\n                if (event instanceof FetchEvent) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Unable to ensure service worker stays alive when updating cache entry for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.getFriendlyURL)(event.request.url)}'.`);\n                }\n            }\n        }\n        return isFresh ? cachedResponse : null;\n    }\n    _isResponseDateFresh(cachedResponse) {\n        const isMaxAgeFromLastUsed = this._config.maxAgeFrom === \"last-used\";\n        if (isMaxAgeFromLastUsed) {\n            return true;\n        }\n        const now = Date.now();\n        if (!this._config.maxAgeSeconds) {\n            return true;\n        }\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            return true;\n        }\n        return dateHeaderTimestamp >= now - this._config.maxAgeSeconds * 1000;\n    }\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has(\"date\")) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get(\"date\");\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        if (Number.isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    async cacheDidUpdate({ cacheName, request }) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(cacheName, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"Plugin\",\n                funcName: \"cacheDidUpdate\",\n                paramName: \"cacheName\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/expiration\",\n                className: \"Plugin\",\n                funcName: \"cacheDidUpdate\",\n                paramName: \"request\"\n            });\n        }\n        const cacheExpiration = this._getCacheExpiration(cacheName);\n        await cacheExpiration.updateTimestamp(request.url);\n        await cacheExpiration.expireEntries();\n    }\n    async deleteCacheAndMetadata() {\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations){\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        this._cacheExpirations = new Map();\n    }\n}\n\nconst calculateEffectiveBoundaries = (blob, start, end)=>{\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(blob, Blob, {\n            moduleName: \"@serwist/range-requests\",\n            funcName: \"calculateEffectiveBoundaries\",\n            paramName: \"blob\"\n        });\n    }\n    const blobSize = blob.size;\n    if (end && end > blobSize || start && start < 0) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"range-not-satisfiable\", {\n            size: blobSize,\n            end,\n            start\n        });\n    }\n    let effectiveStart;\n    let effectiveEnd;\n    if (start !== undefined && end !== undefined) {\n        effectiveStart = start;\n        effectiveEnd = end + 1;\n    } else if (start !== undefined && end === undefined) {\n        effectiveStart = start;\n        effectiveEnd = blobSize;\n    } else if (end !== undefined && start === undefined) {\n        effectiveStart = blobSize - end;\n        effectiveEnd = blobSize;\n    }\n    return {\n        start: effectiveStart,\n        end: effectiveEnd\n    };\n};\n\nconst parseRangeHeader = (rangeHeader)=>{\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(rangeHeader, \"string\", {\n            moduleName: \"@serwist/range-requests\",\n            funcName: \"parseRangeHeader\",\n            paramName: \"rangeHeader\"\n        });\n    }\n    const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n    if (!normalizedRangeHeader.startsWith(\"bytes=\")) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"unit-must-be-bytes\", {\n            normalizedRangeHeader\n        });\n    }\n    if (normalizedRangeHeader.includes(\",\")) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"single-range-only\", {\n            normalizedRangeHeader\n        });\n    }\n    const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader);\n    if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"invalid-range-values\", {\n            normalizedRangeHeader\n        });\n    }\n    return {\n        start: rangeParts[1] === \"\" ? undefined : Number(rangeParts[1]),\n        end: rangeParts[2] === \"\" ? undefined : Number(rangeParts[2])\n    };\n};\n\nconst createPartialResponse = async (request, originalResponse)=>{\n    try {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/range-requests\",\n                funcName: \"createPartialResponse\",\n                paramName: \"request\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(originalResponse, Response, {\n                moduleName: \"@serwist/range-requests\",\n                funcName: \"createPartialResponse\",\n                paramName: \"originalResponse\"\n            });\n        }\n        if (originalResponse.status === 206) {\n            return originalResponse;\n        }\n        const rangeHeader = request.headers.get(\"range\");\n        if (!rangeHeader) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"no-range-header\");\n        }\n        const boundaries = parseRangeHeader(rangeHeader);\n        const originalBlob = await originalResponse.blob();\n        const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n        const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n        const slicedBlobSize = slicedBlob.size;\n        const slicedResponse = new Response(slicedBlob, {\n            status: 206,\n            statusText: \"Partial Content\",\n            headers: originalResponse.headers\n        });\n        slicedResponse.headers.set(\"Content-Length\", String(slicedBlobSize));\n        slicedResponse.headers.set(\"Content-Range\", `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` + `${originalBlob.size}`);\n        return slicedResponse;\n    } catch (error) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Unable to construct a partial response; returning a \" + \"416 Range Not Satisfiable response instead.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View details here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(error);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(request);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(originalResponse);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n        }\n        return new Response(\"\", {\n            status: 416,\n            statusText: \"Range Not Satisfiable\"\n        });\n    }\n};\n\nclass RangeRequestsPlugin {\n    cachedResponseWillBeUsed = async ({ request, cachedResponse })=>{\n        if (cachedResponse && request.headers.has(\"range\")) {\n            return await createPartialResponse(request, cachedResponse);\n        }\n        return cachedResponse;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlcndpc3Qrc3dAOS4wLjAtcHJldmlldy4yMV90eXBlc2NyaXB0QDUuNC41L25vZGVfbW9kdWxlcy9Ac2Vyd2lzdC9zdy9kaXN0L2luZGV4LnBsdWdpbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMk47QUFDbEY7QUFDbEc7QUFDb0I7QUFDdEI7QUFDSjtBQUNIO0FBQ21COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBLHNCQUFzQixnRUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFlBQVksSUFBcUM7QUFDakQsWUFBWSwwREFBTTtBQUNsQixZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQW9ELElBQUk7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksSUFBcUM7QUFDakQsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixJQUFxQztBQUNyRCxnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw2RUFBcUI7QUFDaEU7QUFDQSwwQkFBMEIsK0RBQU87QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLFlBQVksSUFBcUM7QUFDakQ7QUFDQSwwQkFBMEIsZ0VBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRDtBQUNBLGdCQUFnQiwwREFBTSxvQ0FBb0Msc0VBQWMsZUFBZTtBQUN2RixnQkFBZ0IsMERBQU07QUFDdEIsZ0JBQWdCLDBEQUFNLDRCQUE0QiwrQkFBK0I7QUFDakYsZ0JBQWdCLDBEQUFNLDJCQUEyQix1Q0FBdUM7QUFDeEYsZ0JBQWdCLDBEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixnQkFBZ0IsMERBQU07QUFDdEIsZ0JBQWdCLDBEQUFNLHlCQUF5QixnQkFBZ0I7QUFDL0QsZ0JBQWdCLDBEQUFNLDBCQUEwQiw0Q0FBNEM7QUFDNUYsZ0JBQWdCLDBEQUFNO0FBQ3RCLGdCQUFnQiwwREFBTTtBQUN0QixnQkFBZ0IsMERBQU07QUFDdEIsZ0JBQWdCLDBEQUFNO0FBQ3RCLGdCQUFnQiwwREFBTTtBQUN0QixnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFVBQVU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCLEdBQUcsa0JBQWtCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMkNBQU07QUFDbkM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxZQUFZLElBQXFDO0FBQ2pELFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwwQkFBMEIsZ0VBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRDtBQUNBLGdCQUFnQiwwREFBTSwyQkFBMkIsb0JBQW9CLE9BQU8sZ0RBQWdELG1CQUFtQiwwQ0FBMEMsaUJBQWlCLGdCQUFnQjtBQUMxTixnQkFBZ0IsMERBQU0sOEJBQThCLDBDQUEwQztBQUM5RjtBQUNBLG9CQUFvQiwwREFBTSxZQUFZLElBQUk7QUFDMUM7QUFDQSxnQkFBZ0IsMERBQU07QUFDdEIsY0FBYztBQUNkLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLElBQXFDO0FBQ2pELFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixJQUFxQztBQUNyRCwwQkFBMEIsZ0VBQVk7QUFDdEM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLFlBQVksSUFBcUM7QUFDakQ7QUFDQSwwQkFBMEIsZ0VBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlFQUEwQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSwwQkFBMEIscUVBQWlCO0FBQzNDLHNCQUFzQixnRUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJDQUEyQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsZ0JBQWdCLElBQXFDO0FBQ3JEO0FBQ0Esb0JBQW9CLDBEQUFNLG9GQUFvRixzRUFBYyxvQkFBb0I7QUFDaEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixvQkFBb0I7QUFDL0MsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLElBQXFDO0FBQzdDLFFBQVEsMERBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QyxRQUFRLDBEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRUFBWTtBQUM5QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0JBQWtCLGdFQUFZO0FBQzlCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRUFBWTtBQUM5QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksSUFBcUM7QUFDakQsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsNkRBQTZELDBCQUEwQixHQUFHLDRCQUE0QixRQUFRLGtCQUFrQjtBQUNoSjtBQUNBLE1BQU07QUFDTixZQUFZLElBQXFDO0FBQ2pELFlBQVksMERBQU0sK0NBQStDO0FBQ2pFLFlBQVksMERBQU07QUFDbEIsWUFBWSwwREFBTTtBQUNsQixZQUFZLDBEQUFNO0FBQ2xCLFlBQVksMERBQU07QUFDbEIsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLHlCQUF5QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2Vyd2lzdCtzd0A5LjAuMC1wcmV2aWV3LjIxX3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N3L2Rpc3QvaW5kZXgucGx1Z2lucy5qcz9kYTI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEIgYXMgQmFja2dyb3VuZFN5bmNQbHVnaW4sIFEgYXMgQmFja2dyb3VuZFN5bmNRdWV1ZSwgYSBhcyBCYWNrZ3JvdW5kU3luY1F1ZXVlU3RvcmUsIFAgYXMgUHJlY2FjaGVGYWxsYmFja1BsdWdpbiwgUyBhcyBTdG9yYWJsZVJlcXVlc3QsIGkgYXMgaW5pdGlhbGl6ZUdvb2dsZUFuYWx5dGljcyB9IGZyb20gJy4vY2h1bmtzL1ByZWNhY2hlRmFsbGJhY2tQbHVnaW4uanMnO1xuaW1wb3J0IHsgU2Vyd2lzdEVycm9yLCBsb2dnZXIsIGFzc2VydCwgcmVzdWx0aW5nQ2xpZW50RXhpc3RzLCB0aW1lb3V0LCBnZXRGcmllbmRseVVSTCwgcHJpdmF0ZUNhY2hlTmFtZXMgfSBmcm9tICdAc2Vyd2lzdC9jb3JlL2ludGVybmFsJztcbmltcG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfSBmcm9tICdpZGInO1xuaW1wb3J0IHsgcmVnaXN0ZXJRdW90YUVycm9yQ2FsbGJhY2sgfSBmcm9tICdAc2Vyd2lzdC9jb3JlJztcbmltcG9ydCAnLi9jaHVua3Mvc2luZ2xldG9uUm91dGVyLmpzJztcbmltcG9ydCAnLi9jaHVua3MvTmV0d29ya09ubHkuanMnO1xuaW1wb3J0ICcuL2NodW5rcy9TdHJhdGVneS5qcyc7XG5pbXBvcnQgJy4vY2h1bmtzL3NpbmdsZXRvblByZWNhY2hlQ29udHJvbGxlci5qcyc7XG5cbmNvbnN0IENBQ0hFX1VQREFURURfTUVTU0FHRV9UWVBFID0gXCJDQUNIRV9VUERBVEVEXCI7XG5jb25zdCBDQUNIRV9VUERBVEVEX01FU1NBR0VfTUVUQSA9IFwic2Vyd2lzdC1icm9hZGNhc3QtdXBkYXRlXCI7XG5jb25zdCBkZWZhdWx0Tm90aWZ5QWxsQ2xpZW50cyA9IHRydWU7XG5jb25zdCBkZWZhdWx0SGVhZGVyc1RvQ2hlY2sgPSBbXG4gICAgXCJjb250ZW50LWxlbmd0aFwiLFxuICAgIFwiZXRhZ1wiLFxuICAgIFwibGFzdC1tb2RpZmllZFwiXG5dO1xuXG5jb25zdCByZXNwb25zZXNBcmVTYW1lID0gKGZpcnN0UmVzcG9uc2UsIHNlY29uZFJlc3BvbnNlLCBoZWFkZXJzVG9DaGVjayk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmICghKGZpcnN0UmVzcG9uc2UgaW5zdGFuY2VvZiBSZXNwb25zZSAmJiBzZWNvbmRSZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImludmFsaWQtcmVzcG9uc2VzLWFyZS1zYW1lLWFyZ3NcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXRMZWFzdE9uZUhlYWRlckF2YWlsYWJsZSA9IGhlYWRlcnNUb0NoZWNrLnNvbWUoKGhlYWRlcik9PntcbiAgICAgICAgcmV0dXJuIGZpcnN0UmVzcG9uc2UuaGVhZGVycy5oYXMoaGVhZGVyKSAmJiBzZWNvbmRSZXNwb25zZS5oZWFkZXJzLmhhcyhoZWFkZXIpO1xuICAgIH0pO1xuICAgIGlmICghYXRMZWFzdE9uZUhlYWRlckF2YWlsYWJsZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIlVuYWJsZSB0byBkZXRlcm1pbmUgd2hlcmUgdGhlIHJlc3BvbnNlIGhhcyBiZWVuIHVwZGF0ZWQgYmVjYXVzZSBub25lIG9mIHRoZSBoZWFkZXJzIHRoYXQgd291bGQgYmUgY2hlY2tlZCBhcmUgcHJlc2VudC5cIik7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoXCJBdHRlbXB0aW5nIHRvIGNvbXBhcmUgdGhlIGZvbGxvd2luZzogXCIsIGZpcnN0UmVzcG9uc2UsIHNlY29uZFJlc3BvbnNlLCBoZWFkZXJzVG9DaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoZWFkZXJzVG9DaGVjay5ldmVyeSgoaGVhZGVyKT0+e1xuICAgICAgICBjb25zdCBoZWFkZXJTdGF0ZUNvbXBhcmlzb24gPSBmaXJzdFJlc3BvbnNlLmhlYWRlcnMuaGFzKGhlYWRlcikgPT09IHNlY29uZFJlc3BvbnNlLmhlYWRlcnMuaGFzKGhlYWRlcik7XG4gICAgICAgIGNvbnN0IGhlYWRlclZhbHVlQ29tcGFyaXNvbiA9IGZpcnN0UmVzcG9uc2UuaGVhZGVycy5nZXQoaGVhZGVyKSA9PT0gc2Vjb25kUmVzcG9uc2UuaGVhZGVycy5nZXQoaGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIGhlYWRlclN0YXRlQ29tcGFyaXNvbiAmJiBoZWFkZXJWYWx1ZUNvbXBhcmlzb247XG4gICAgfSk7XG59O1xuXG5jb25zdCBpc1NhZmFyaSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IGRlZmF1bHRQYXlsb2FkR2VuZXJhdG9yID0gKGRhdGEpPT57XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FjaGVOYW1lOiBkYXRhLmNhY2hlTmFtZSxcbiAgICAgICAgdXBkYXRlZFVSTDogZGF0YS5yZXF1ZXN0LnVybFxuICAgIH07XG59O1xuY2xhc3MgQnJvYWRjYXN0Q2FjaGVVcGRhdGUge1xuICAgIF9oZWFkZXJzVG9DaGVjaztcbiAgICBfZ2VuZXJhdGVQYXlsb2FkO1xuICAgIF9ub3RpZnlBbGxDbGllbnRzO1xuICAgIGNvbnN0cnVjdG9yKHsgZ2VuZXJhdGVQYXlsb2FkLCBoZWFkZXJzVG9DaGVjaywgbm90aWZ5QWxsQ2xpZW50cyB9ID0ge30pe1xuICAgICAgICB0aGlzLl9oZWFkZXJzVG9DaGVjayA9IGhlYWRlcnNUb0NoZWNrIHx8IGRlZmF1bHRIZWFkZXJzVG9DaGVjaztcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGVQYXlsb2FkID0gZ2VuZXJhdGVQYXlsb2FkIHx8IGRlZmF1bHRQYXlsb2FkR2VuZXJhdG9yO1xuICAgICAgICB0aGlzLl9ub3RpZnlBbGxDbGllbnRzID0gbm90aWZ5QWxsQ2xpZW50cyA/PyBkZWZhdWx0Tm90aWZ5QWxsQ2xpZW50cztcbiAgICB9XG4gICAgYXN5bmMgbm90aWZ5SWZVcGRhdGVkKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHlwZShvcHRpb25zLmNhY2hlTmFtZSwgXCJzdHJpbmdcIiwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvYnJvYWRjYXN0LXVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJCcm9hZGNhc3RDYWNoZVVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcIm5vdGlmeUlmVXBkYXRlZFwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJjYWNoZU5hbWVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNJbnN0YW5jZShvcHRpb25zLm5ld1Jlc3BvbnNlLCBSZXNwb25zZSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvYnJvYWRjYXN0LXVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJCcm9hZGNhc3RDYWNoZVVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcIm5vdGlmeUlmVXBkYXRlZFwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJuZXdSZXNwb25zZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFzc2VydC5pc0luc3RhbmNlKG9wdGlvbnMucmVxdWVzdCwgUmVxdWVzdCwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvYnJvYWRjYXN0LXVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJCcm9hZGNhc3RDYWNoZVVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcIm5vdGlmeUlmVXBkYXRlZFwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJyZXF1ZXN0XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5vbGRSZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzcG9uc2VzQXJlU2FtZShvcHRpb25zLm9sZFJlc3BvbnNlLCBvcHRpb25zLm5ld1Jlc3BvbnNlLCB0aGlzLl9oZWFkZXJzVG9DaGVjaykpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiTmV3ZXIgcmVzcG9uc2UgZm91bmQgKGFuZCBjYWNoZWQpIGZvcjpcIiwgb3B0aW9ucy5yZXF1ZXN0LnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBDQUNIRV9VUERBVEVEX01FU1NBR0VfVFlQRSxcbiAgICAgICAgICAgICAgICBtZXRhOiBDQUNIRV9VUERBVEVEX01FU1NBR0VfTUVUQSxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB0aGlzLl9nZW5lcmF0ZVBheWxvYWQob3B0aW9ucylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXF1ZXN0Lm1vZGUgPT09IFwibmF2aWdhdGVcIikge1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHRpbmdDbGllbnRJZDtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudCBpbnN0YW5jZW9mIEZldGNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0aW5nQ2xpZW50SWQgPSBvcHRpb25zLmV2ZW50LnJlc3VsdGluZ0NsaWVudElkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRpbmdXaW4gPSBhd2FpdCByZXN1bHRpbmdDbGllbnRFeGlzdHMocmVzdWx0aW5nQ2xpZW50SWQpO1xuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0aW5nV2luIHx8IGlzU2FmYXJpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRpbWVvdXQoMzUwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX25vdGlmeUFsbENsaWVudHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3dzID0gYXdhaXQgc2VsZi5jbGllbnRzLm1hdGNoQWxsKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ3aW5kb3dcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd2luIG9mIHdpbmRvd3Mpe1xuICAgICAgICAgICAgICAgICAgICB3aW4ucG9zdE1lc3NhZ2UobWVzc2FnZURhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXZlbnQgaW5zdGFuY2VvZiBGZXRjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHNlbGYuY2xpZW50cy5nZXQob3B0aW9ucy5ldmVudC5jbGllbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudD8ucG9zdE1lc3NhZ2UobWVzc2FnZURhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQnJvYWRjYXN0VXBkYXRlUGx1Z2luIHtcbiAgICBfYnJvYWRjYXN0VXBkYXRlO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgICAgICB0aGlzLl9icm9hZGNhc3RVcGRhdGUgPSBuZXcgQnJvYWRjYXN0Q2FjaGVVcGRhdGUob3B0aW9ucyk7XG4gICAgfVxuICAgIGNhY2hlRGlkVXBkYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgdm9pZCB0aGlzLl9icm9hZGNhc3RVcGRhdGUubm90aWZ5SWZVcGRhdGVkKG9wdGlvbnMpO1xuICAgIH1cbn1cblxuY2xhc3MgQ2FjaGVhYmxlUmVzcG9uc2Uge1xuICAgIF9zdGF0dXNlcztcbiAgICBfaGVhZGVycztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSl7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmICghKGNvbmZpZy5zdGF0dXNlcyB8fCBjb25maWcuaGVhZGVycykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwic3RhdHVzZXMtb3ItaGVhZGVycy1yZXF1aXJlZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvY2FjaGVhYmxlLXJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZWFibGVSZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLnN0YXR1c2VzKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmlzQXJyYXkoY29uZmlnLnN0YXR1c2VzLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvY2FjaGVhYmxlLXJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZWFibGVSZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY29uZmlnLnN0YXR1c2VzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcuaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY29uZmlnLmhlYWRlcnMsIFwib2JqZWN0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9jYWNoZWFibGUtcmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNhY2hlYWJsZVJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJjb25maWcuaGVhZGVyc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdHVzZXMgPSBjb25maWcuc3RhdHVzZXM7XG4gICAgICAgIGlmIChjb25maWcuaGVhZGVycykge1xuICAgICAgICAgICAgdGhpcy5faGVhZGVycyA9IG5ldyBIZWFkZXJzKGNvbmZpZy5oZWFkZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc1Jlc3BvbnNlQ2FjaGVhYmxlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFzc2VydC5pc0luc3RhbmNlKHJlc3BvbnNlLCBSZXNwb25zZSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvY2FjaGVhYmxlLXJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNhY2hlYWJsZVJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiaXNSZXNwb25zZUNhY2hlYWJsZVwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJyZXNwb25zZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2FjaGVhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1c2VzKSB7XG4gICAgICAgICAgICBjYWNoZWFibGUgPSB0aGlzLl9zdGF0dXNlcy5pbmNsdWRlcyhyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9oZWFkZXJzICYmIGNhY2hlYWJsZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaGVhZGVyTmFtZSwgaGVhZGVyVmFsdWVdIG9mIHRoaXMuX2hlYWRlcnMuZW50cmllcygpKXtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuaGVhZGVycy5nZXQoaGVhZGVyTmFtZSkgIT09IGhlYWRlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKCFjYWNoZWFibGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZ3JvdXBDb2xsYXBzZWQoYFRoZSByZXF1ZXN0IGZvciAnJHtnZXRGcmllbmRseVVSTChyZXNwb25zZS51cmwpfScgcmV0dXJuZWQgYSByZXNwb25zZSB0aGF0IGRvZXMgbm90IG1lZXQgdGhlIGNyaXRlcmlhIGZvciBiZWluZyBjYWNoZWQuYCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKFwiVmlldyBjYWNoZWFiaWxpdHkgY3JpdGVyaWEgaGVyZS5cIik7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgQ2FjaGVhYmxlIHN0YXR1c2VzOiAke0pTT04uc3RyaW5naWZ5KHRoaXMuX3N0YXR1c2VzKX1gKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBDYWNoZWFibGUgaGVhZGVyczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLl9oZWFkZXJzLCBudWxsLCAyKX1gKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dGcmllbmRseUhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpPT57XG4gICAgICAgICAgICAgICAgICAgIGxvZ0ZyaWVuZGx5SGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKFwiVmlldyByZXNwb25zZSBzdGF0dXMgYW5kIGhlYWRlcnMgaGVyZS5cIik7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgUmVzcG9uc2Ugc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXNwb25zZSBoZWFkZXJzOiAke0pTT04uc3RyaW5naWZ5KGxvZ0ZyaWVuZGx5SGVhZGVycywgbnVsbCwgMil9YCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKFwiVmlldyBmdWxsIHJlc3BvbnNlIGRldGFpbHMgaGVyZS5cIik7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhyZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVhYmxlO1xuICAgIH1cbn1cblxuY2xhc3MgQ2FjaGVhYmxlUmVzcG9uc2VQbHVnaW4ge1xuICAgIF9jYWNoZWFibGVSZXNwb25zZTtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICB0aGlzLl9jYWNoZWFibGVSZXNwb25zZSA9IG5ldyBDYWNoZWFibGVSZXNwb25zZShjb25maWcpO1xuICAgIH1cbiAgICBjYWNoZVdpbGxVcGRhdGUgPSBhc3luYyAoeyByZXNwb25zZSB9KT0+e1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVhYmxlUmVzcG9uc2UuaXNSZXNwb25zZUNhY2hlYWJsZShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufVxuXG5jb25zdCBEQl9OQU1FID0gXCJzZXJ3aXN0LWV4cGlyYXRpb25cIjtcbmNvbnN0IENBQ0hFX09CSkVDVF9TVE9SRSA9IFwiY2FjaGUtZW50cmllc1wiO1xuY29uc3Qgbm9ybWFsaXplVVJMID0gKHVuTm9ybWFsaXplZFVybCk9PntcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVuTm9ybWFsaXplZFVybCwgbG9jYXRpb24uaHJlZik7XG4gICAgdXJsLmhhc2ggPSBcIlwiO1xuICAgIHJldHVybiB1cmwuaHJlZjtcbn07XG5jbGFzcyBDYWNoZVRpbWVzdGFtcHNNb2RlbCB7XG4gICAgX2NhY2hlTmFtZTtcbiAgICBfZGIgPSBudWxsO1xuICAgIGNvbnN0cnVjdG9yKGNhY2hlTmFtZSl7XG4gICAgICAgIHRoaXMuX2NhY2hlTmFtZSA9IGNhY2hlTmFtZTtcbiAgICB9XG4gICAgX2dldElkKHVybCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5fY2FjaGVOYW1lfXwke25vcm1hbGl6ZVVSTCh1cmwpfWA7XG4gICAgfVxuICAgIF91cGdyYWRlRGIoZGIpIHtcbiAgICAgICAgY29uc3Qgb2JqU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShDQUNIRV9PQkpFQ1RfU1RPUkUsIHtcbiAgICAgICAgICAgIGtleVBhdGg6IFwiaWRcIlxuICAgICAgICB9KTtcbiAgICAgICAgb2JqU3RvcmUuY3JlYXRlSW5kZXgoXCJjYWNoZU5hbWVcIiwgXCJjYWNoZU5hbWVcIiwge1xuICAgICAgICAgICAgdW5pcXVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgb2JqU3RvcmUuY3JlYXRlSW5kZXgoXCJ0aW1lc3RhbXBcIiwgXCJ0aW1lc3RhbXBcIiwge1xuICAgICAgICAgICAgdW5pcXVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3VwZ3JhZGVEYkFuZERlbGV0ZU9sZERicyhkYikge1xuICAgICAgICB0aGlzLl91cGdyYWRlRGIoZGIpO1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVOYW1lKSB7XG4gICAgICAgICAgICB2b2lkIGRlbGV0ZURCKHRoaXMuX2NhY2hlTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc2V0VGltZXN0YW1wKHVybCwgdGltZXN0YW1wKSB7XG4gICAgICAgIHVybCA9IG5vcm1hbGl6ZVVSTCh1cmwpO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgIGlkOiB0aGlzLl9nZXRJZCh1cmwpLFxuICAgICAgICAgICAgY2FjaGVOYW1lOiB0aGlzLl9jYWNoZU5hbWUsXG4gICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICB0aW1lc3RhbXBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERiKCk7XG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oQ0FDSEVfT0JKRUNUX1NUT1JFLCBcInJlYWR3cml0ZVwiLCB7XG4gICAgICAgICAgICBkdXJhYmlsaXR5OiBcInJlbGF4ZWRcIlxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdHguc3RvcmUucHV0KGVudHJ5KTtcbiAgICAgICAgYXdhaXQgdHguZG9uZTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VGltZXN0YW1wKHVybCkge1xuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0RGIoKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSBhd2FpdCBkYi5nZXQoQ0FDSEVfT0JKRUNUX1NUT1JFLCB0aGlzLl9nZXRJZCh1cmwpKTtcbiAgICAgICAgcmV0dXJuIGVudHJ5Py50aW1lc3RhbXA7XG4gICAgfVxuICAgIGFzeW5jIGV4cGlyZUVudHJpZXMobWluVGltZXN0YW1wLCBtYXhDb3VudCkge1xuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0RGIoKTtcbiAgICAgICAgbGV0IGN1cnNvciA9IGF3YWl0IGRiLnRyYW5zYWN0aW9uKENBQ0hFX09CSkVDVF9TVE9SRSwgXCJyZWFkd3JpdGVcIikuc3RvcmUuaW5kZXgoXCJ0aW1lc3RhbXBcIikub3BlbkN1cnNvcihudWxsLCBcInByZXZcIik7XG4gICAgICAgIGNvbnN0IHVybHNEZWxldGVkID0gW107XG4gICAgICAgIGxldCBlbnRyaWVzTm90RGVsZXRlZENvdW50ID0gMDtcbiAgICAgICAgd2hpbGUoY3Vyc29yKXtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGN1cnNvci52YWx1ZTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuY2FjaGVOYW1lID09PSB0aGlzLl9jYWNoZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluVGltZXN0YW1wICYmIHJlc3VsdC50aW1lc3RhbXAgPCBtaW5UaW1lc3RhbXAgfHwgbWF4Q291bnQgJiYgZW50cmllc05vdERlbGV0ZWRDb3VudCA+PSBtYXhDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3IuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHVybHNEZWxldGVkLnB1c2gocmVzdWx0LnVybCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cmllc05vdERlbGV0ZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmxzRGVsZXRlZDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0RGIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGIpIHtcbiAgICAgICAgICAgIHRoaXMuX2RiID0gYXdhaXQgb3BlbkRCKERCX05BTUUsIDEsIHtcbiAgICAgICAgICAgICAgICB1cGdyYWRlOiB0aGlzLl91cGdyYWRlRGJBbmREZWxldGVPbGREYnMuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiO1xuICAgIH1cbn1cblxuY2xhc3MgQ2FjaGVFeHBpcmF0aW9uIHtcbiAgICBfaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgX3JlcnVuUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgX21heEVudHJpZXM7XG4gICAgX21heEFnZVNlY29uZHM7XG4gICAgX21hdGNoT3B0aW9ucztcbiAgICBfY2FjaGVOYW1lO1xuICAgIF90aW1lc3RhbXBNb2RlbDtcbiAgICBjb25zdHJ1Y3RvcihjYWNoZU5hbWUsIGNvbmZpZyA9IHt9KXtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHlwZShjYWNoZU5hbWUsIFwic3RyaW5nXCIsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVFeHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY2FjaGVOYW1lXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCEoY29uZmlnLm1heEVudHJpZXMgfHwgY29uZmlnLm1heEFnZVNlY29uZHMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcIm1heC1lbnRyaWVzLW9yLWFnZS1yZXF1aXJlZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVFeHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcubWF4RW50cmllcykge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY29uZmlnLm1heEVudHJpZXMsIFwibnVtYmVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZUV4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNvbmZpZy5tYXhFbnRyaWVzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcubWF4QWdlU2Vjb25kcykge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY29uZmlnLm1heEFnZVNlY29uZHMsIFwibnVtYmVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZUV4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNvbmZpZy5tYXhBZ2VTZWNvbmRzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXhFbnRyaWVzID0gY29uZmlnLm1heEVudHJpZXM7XG4gICAgICAgIHRoaXMuX21heEFnZVNlY29uZHMgPSBjb25maWcubWF4QWdlU2Vjb25kcztcbiAgICAgICAgdGhpcy5fbWF0Y2hPcHRpb25zID0gY29uZmlnLm1hdGNoT3B0aW9ucztcbiAgICAgICAgdGhpcy5fY2FjaGVOYW1lID0gY2FjaGVOYW1lO1xuICAgICAgICB0aGlzLl90aW1lc3RhbXBNb2RlbCA9IG5ldyBDYWNoZVRpbWVzdGFtcHNNb2RlbChjYWNoZU5hbWUpO1xuICAgIH1cbiAgICBhc3luYyBleHBpcmVFbnRyaWVzKCkge1xuICAgICAgICBpZiAodGhpcy5faXNSdW5uaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXJ1blJlcXVlc3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNSdW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgbWluVGltZXN0YW1wID0gdGhpcy5fbWF4QWdlU2Vjb25kcyA/IERhdGUubm93KCkgLSB0aGlzLl9tYXhBZ2VTZWNvbmRzICogMTAwMCA6IDA7XG4gICAgICAgIGNvbnN0IHVybHNFeHBpcmVkID0gYXdhaXQgdGhpcy5fdGltZXN0YW1wTW9kZWwuZXhwaXJlRW50cmllcyhtaW5UaW1lc3RhbXAsIHRoaXMuX21heEVudHJpZXMpO1xuICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IHNlbGYuY2FjaGVzLm9wZW4odGhpcy5fY2FjaGVOYW1lKTtcbiAgICAgICAgZm9yIChjb25zdCB1cmwgb2YgdXJsc0V4cGlyZWQpe1xuICAgICAgICAgICAgYXdhaXQgY2FjaGUuZGVsZXRlKHVybCwgdGhpcy5fbWF0Y2hPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBpZiAodXJsc0V4cGlyZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5ncm91cENvbGxhcHNlZChgRXhwaXJlZCAke3VybHNFeHBpcmVkLmxlbmd0aH0gYCArIGAke3VybHNFeHBpcmVkLmxlbmd0aCA9PT0gMSA/IFwiZW50cnlcIiA6IFwiZW50cmllc1wifSBhbmQgcmVtb3ZlZCBgICsgYCR7dXJsc0V4cGlyZWQubGVuZ3RoID09PSAxID8gXCJpdFwiIDogXCJ0aGVtXCJ9IGZyb20gdGhlIGAgKyBgJyR7dGhpcy5fY2FjaGVOYW1lfScgY2FjaGUuYCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgRXhwaXJlZCB0aGUgZm9sbG93aW5nICR7dXJsc0V4cGlyZWQubGVuZ3RoID09PSAxID8gXCJVUkxcIiA6IFwiVVJMc1wifTpgKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHVybCBvZiB1cmxzRXhwaXJlZCl7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coYCAgICAke3VybH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcIkNhY2hlIGV4cGlyYXRpb24gcmFuIGFuZCBmb3VuZCBubyBlbnRyaWVzIHRvIHJlbW92ZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9yZXJ1blJlcXVlc3RlZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVydW5SZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZvaWQgdGhpcy5leHBpcmVFbnRyaWVzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlVGltZXN0YW1wKHVybCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBhc3NlcnQuaXNUeXBlKHVybCwgXCJzdHJpbmdcIiwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZUV4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJ1cGRhdGVUaW1lc3RhbXBcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwidXJsXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuX3RpbWVzdGFtcE1vZGVsLnNldFRpbWVzdGFtcCh1cmwsIERhdGUubm93KCkpO1xuICAgIH1cbiAgICBhc3luYyBpc1VSTEV4cGlyZWQodXJsKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWF4QWdlU2Vjb25kcykge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJleHBpcmVkLXRlc3Qtd2l0aG91dC1tYXgtYWdlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kTmFtZTogXCJpc1VSTEV4cGlyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcIm1heEFnZVNlY29uZHNcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IGF3YWl0IHRoaXMuX3RpbWVzdGFtcE1vZGVsLmdldFRpbWVzdGFtcCh1cmwpO1xuICAgICAgICBjb25zdCBleHBpcmVPbGRlclRoYW4gPSBEYXRlLm5vdygpIC0gdGhpcy5fbWF4QWdlU2Vjb25kcyAqIDEwMDA7XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXAgIT09IHVuZGVmaW5lZCA/IHRpbWVzdGFtcCA8IGV4cGlyZU9sZGVyVGhhbiA6IHRydWU7XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5fcmVydW5SZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgYXdhaXQgdGhpcy5fdGltZXN0YW1wTW9kZWwuZXhwaXJlRW50cmllcyhOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIH1cbn1cblxuY2xhc3MgRXhwaXJhdGlvblBsdWdpbiB7XG4gICAgX2NvbmZpZztcbiAgICBfY2FjaGVFeHBpcmF0aW9ucztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSl7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmICghKGNvbmZpZy5tYXhFbnRyaWVzIHx8IGNvbmZpZy5tYXhBZ2VTZWNvbmRzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJtYXgtZW50cmllcy1vci1hZ2UtcmVxdWlyZWRcIiwge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkV4cGlyYXRpb25QbHVnaW5cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5tYXhFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmlzVHlwZShjb25maWcubWF4RW50cmllcywgXCJudW1iZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkV4cGlyYXRpb25QbHVnaW5cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNvbmZpZy5tYXhFbnRyaWVzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcubWF4QWdlU2Vjb25kcykge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY29uZmlnLm1heEFnZVNlY29uZHMsIFwibnVtYmVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJFeHBpcmF0aW9uUGx1Z2luXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJjb25maWcubWF4QWdlU2Vjb25kc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLm1heEFnZUZyb20pIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNUeXBlKGNvbmZpZy5tYXhBZ2VGcm9tLCBcInN0cmluZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiRXhwaXJhdGlvblBsdWdpblwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY29uZmlnLm1heEFnZUZyb21cIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5fY2FjaGVFeHBpcmF0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcubWF4QWdlRnJvbSkge1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnLm1heEFnZUZyb20gPSBcImxhc3QtZmV0Y2hlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucHVyZ2VPblF1b3RhRXJyb3IpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrKCgpPT50aGlzLmRlbGV0ZUNhY2hlQW5kTWV0YWRhdGEoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldENhY2hlRXhwaXJhdGlvbihjYWNoZU5hbWUpIHtcbiAgICAgICAgaWYgKGNhY2hlTmFtZSA9PT0gcHJpdmF0ZUNhY2hlTmFtZXMuZ2V0UnVudGltZU5hbWUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImV4cGlyZS1jdXN0b20tY2FjaGVzLW9ubHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhY2hlRXhwaXJhdGlvbiA9IHRoaXMuX2NhY2hlRXhwaXJhdGlvbnMuZ2V0KGNhY2hlTmFtZSk7XG4gICAgICAgIGlmICghY2FjaGVFeHBpcmF0aW9uKSB7XG4gICAgICAgICAgICBjYWNoZUV4cGlyYXRpb24gPSBuZXcgQ2FjaGVFeHBpcmF0aW9uKGNhY2hlTmFtZSwgdGhpcy5fY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlRXhwaXJhdGlvbnMuc2V0KGNhY2hlTmFtZSwgY2FjaGVFeHBpcmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVFeHBpcmF0aW9uO1xuICAgIH1cbiAgICBjYWNoZWRSZXNwb25zZVdpbGxCZVVzZWQoeyBldmVudCwgY2FjaGVOYW1lLCByZXF1ZXN0LCBjYWNoZWRSZXNwb25zZSB9KSB7XG4gICAgICAgIGlmICghY2FjaGVkUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzRnJlc2ggPSB0aGlzLl9pc1Jlc3BvbnNlRGF0ZUZyZXNoKGNhY2hlZFJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgY2FjaGVFeHBpcmF0aW9uID0gdGhpcy5fZ2V0Q2FjaGVFeHBpcmF0aW9uKGNhY2hlTmFtZSk7XG4gICAgICAgIGNvbnN0IGlzTWF4QWdlRnJvbUxhc3RVc2VkID0gdGhpcy5fY29uZmlnLm1heEFnZUZyb20gPT09IFwibGFzdC11c2VkXCI7XG4gICAgICAgIGNvbnN0IGRvbmUgPSAoYXN5bmMgKCk9PntcbiAgICAgICAgICAgIGlmIChpc01heEFnZUZyb21MYXN0VXNlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNhY2hlRXhwaXJhdGlvbi51cGRhdGVUaW1lc3RhbXAocmVxdWVzdC51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgY2FjaGVFeHBpcmF0aW9uLmV4cGlyZUVudHJpZXMoKTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV2ZW50LndhaXRVbnRpbChkb25lKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBGZXRjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGBVbmFibGUgdG8gZW5zdXJlIHNlcnZpY2Ugd29ya2VyIHN0YXlzIGFsaXZlIHdoZW4gdXBkYXRpbmcgY2FjaGUgZW50cnkgZm9yICcke2dldEZyaWVuZGx5VVJMKGV2ZW50LnJlcXVlc3QudXJsKX0nLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNGcmVzaCA/IGNhY2hlZFJlc3BvbnNlIDogbnVsbDtcbiAgICB9XG4gICAgX2lzUmVzcG9uc2VEYXRlRnJlc2goY2FjaGVkUmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgaXNNYXhBZ2VGcm9tTGFzdFVzZWQgPSB0aGlzLl9jb25maWcubWF4QWdlRnJvbSA9PT0gXCJsYXN0LXVzZWRcIjtcbiAgICAgICAgaWYgKGlzTWF4QWdlRnJvbUxhc3RVc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZy5tYXhBZ2VTZWNvbmRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRlSGVhZGVyVGltZXN0YW1wID0gdGhpcy5fZ2V0RGF0ZUhlYWRlclRpbWVzdGFtcChjYWNoZWRSZXNwb25zZSk7XG4gICAgICAgIGlmIChkYXRlSGVhZGVyVGltZXN0YW1wID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZUhlYWRlclRpbWVzdGFtcCA+PSBub3cgLSB0aGlzLl9jb25maWcubWF4QWdlU2Vjb25kcyAqIDEwMDA7XG4gICAgfVxuICAgIF9nZXREYXRlSGVhZGVyVGltZXN0YW1wKGNhY2hlZFJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghY2FjaGVkUmVzcG9uc2UuaGVhZGVycy5oYXMoXCJkYXRlXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRlSGVhZGVyID0gY2FjaGVkUmVzcG9uc2UuaGVhZGVycy5nZXQoXCJkYXRlXCIpO1xuICAgICAgICBjb25zdCBwYXJzZWREYXRlID0gbmV3IERhdGUoZGF0ZUhlYWRlcik7XG4gICAgICAgIGNvbnN0IGhlYWRlclRpbWUgPSBwYXJzZWREYXRlLmdldFRpbWUoKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihoZWFkZXJUaW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWRlclRpbWU7XG4gICAgfVxuICAgIGFzeW5jIGNhY2hlRGlkVXBkYXRlKHsgY2FjaGVOYW1lLCByZXF1ZXN0IH0pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHlwZShjYWNoZU5hbWUsIFwic3RyaW5nXCIsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiUGx1Z2luXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY2FjaGVEaWRVcGRhdGVcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY2FjaGVOYW1lXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXNzZXJ0LmlzSW5zdGFuY2UocmVxdWVzdCwgUmVxdWVzdCwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJQbHVnaW5cIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjYWNoZURpZFVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJyZXF1ZXN0XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhY2hlRXhwaXJhdGlvbiA9IHRoaXMuX2dldENhY2hlRXhwaXJhdGlvbihjYWNoZU5hbWUpO1xuICAgICAgICBhd2FpdCBjYWNoZUV4cGlyYXRpb24udXBkYXRlVGltZXN0YW1wKHJlcXVlc3QudXJsKTtcbiAgICAgICAgYXdhaXQgY2FjaGVFeHBpcmF0aW9uLmV4cGlyZUVudHJpZXMoKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlQ2FjaGVBbmRNZXRhZGF0YSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBbY2FjaGVOYW1lLCBjYWNoZUV4cGlyYXRpb25dIG9mIHRoaXMuX2NhY2hlRXhwaXJhdGlvbnMpe1xuICAgICAgICAgICAgYXdhaXQgc2VsZi5jYWNoZXMuZGVsZXRlKGNhY2hlTmFtZSk7XG4gICAgICAgICAgICBhd2FpdCBjYWNoZUV4cGlyYXRpb24uZGVsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FjaGVFeHBpcmF0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICB9XG59XG5cbmNvbnN0IGNhbGN1bGF0ZUVmZmVjdGl2ZUJvdW5kYXJpZXMgPSAoYmxvYiwgc3RhcnQsIGVuZCk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGFzc2VydC5pc0luc3RhbmNlKGJsb2IsIEJsb2IsIHtcbiAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvcmFuZ2UtcmVxdWVzdHNcIixcbiAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNhbGN1bGF0ZUVmZmVjdGl2ZUJvdW5kYXJpZXNcIixcbiAgICAgICAgICAgIHBhcmFtTmFtZTogXCJibG9iXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGJsb2JTaXplID0gYmxvYi5zaXplO1xuICAgIGlmIChlbmQgJiYgZW5kID4gYmxvYlNpemUgfHwgc3RhcnQgJiYgc3RhcnQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJyYW5nZS1ub3Qtc2F0aXNmaWFibGVcIiwge1xuICAgICAgICAgICAgc2l6ZTogYmxvYlNpemUsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBzdGFydFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGVmZmVjdGl2ZVN0YXJ0O1xuICAgIGxldCBlZmZlY3RpdmVFbmQ7XG4gICAgaWYgKHN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWZmZWN0aXZlU3RhcnQgPSBzdGFydDtcbiAgICAgICAgZWZmZWN0aXZlRW5kID0gZW5kICsgMTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWZmZWN0aXZlU3RhcnQgPSBzdGFydDtcbiAgICAgICAgZWZmZWN0aXZlRW5kID0gYmxvYlNpemU7XG4gICAgfSBlbHNlIGlmIChlbmQgIT09IHVuZGVmaW5lZCAmJiBzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVmZmVjdGl2ZVN0YXJ0ID0gYmxvYlNpemUgLSBlbmQ7XG4gICAgICAgIGVmZmVjdGl2ZUVuZCA9IGJsb2JTaXplO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogZWZmZWN0aXZlU3RhcnQsXG4gICAgICAgIGVuZDogZWZmZWN0aXZlRW5kXG4gICAgfTtcbn07XG5cbmNvbnN0IHBhcnNlUmFuZ2VIZWFkZXIgPSAocmFuZ2VIZWFkZXIpPT57XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBhc3NlcnQuaXNUeXBlKHJhbmdlSGVhZGVyLCBcInN0cmluZ1wiLCB7XG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L3JhbmdlLXJlcXVlc3RzXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJwYXJzZVJhbmdlSGVhZGVyXCIsXG4gICAgICAgICAgICBwYXJhbU5hbWU6IFwicmFuZ2VIZWFkZXJcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZFJhbmdlSGVhZGVyID0gcmFuZ2VIZWFkZXIudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCFub3JtYWxpemVkUmFuZ2VIZWFkZXIuc3RhcnRzV2l0aChcImJ5dGVzPVwiKSkge1xuICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwidW5pdC1tdXN0LWJlLWJ5dGVzXCIsIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRSYW5nZUhlYWRlclxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG5vcm1hbGl6ZWRSYW5nZUhlYWRlci5pbmNsdWRlcyhcIixcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcInNpbmdsZS1yYW5nZS1vbmx5XCIsIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRSYW5nZUhlYWRlclxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2VQYXJ0cyA9IC8oXFxkKiktKFxcZCopLy5leGVjKG5vcm1hbGl6ZWRSYW5nZUhlYWRlcik7XG4gICAgaWYgKCFyYW5nZVBhcnRzIHx8ICEocmFuZ2VQYXJ0c1sxXSB8fCByYW5nZVBhcnRzWzJdKSkge1xuICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwiaW52YWxpZC1yYW5nZS12YWx1ZXNcIiwge1xuICAgICAgICAgICAgbm9ybWFsaXplZFJhbmdlSGVhZGVyXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogcmFuZ2VQYXJ0c1sxXSA9PT0gXCJcIiA/IHVuZGVmaW5lZCA6IE51bWJlcihyYW5nZVBhcnRzWzFdKSxcbiAgICAgICAgZW5kOiByYW5nZVBhcnRzWzJdID09PSBcIlwiID8gdW5kZWZpbmVkIDogTnVtYmVyKHJhbmdlUGFydHNbMl0pXG4gICAgfTtcbn07XG5cbmNvbnN0IGNyZWF0ZVBhcnRpYWxSZXNwb25zZSA9IGFzeW5jIChyZXF1ZXN0LCBvcmlnaW5hbFJlc3BvbnNlKT0+e1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFzc2VydC5pc0luc3RhbmNlKHJlcXVlc3QsIFJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L3JhbmdlLXJlcXVlc3RzXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY3JlYXRlUGFydGlhbFJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcInJlcXVlc3RcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNJbnN0YW5jZShvcmlnaW5hbFJlc3BvbnNlLCBSZXNwb25zZSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvcmFuZ2UtcmVxdWVzdHNcIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjcmVhdGVQYXJ0aWFsUmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwib3JpZ2luYWxSZXNwb25zZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JpZ2luYWxSZXNwb25zZS5zdGF0dXMgPT09IDIwNikge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFuZ2VIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KFwicmFuZ2VcIik7XG4gICAgICAgIGlmICghcmFuZ2VIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJuby1yYW5nZS1oZWFkZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm91bmRhcmllcyA9IHBhcnNlUmFuZ2VIZWFkZXIocmFuZ2VIZWFkZXIpO1xuICAgICAgICBjb25zdCBvcmlnaW5hbEJsb2IgPSBhd2FpdCBvcmlnaW5hbFJlc3BvbnNlLmJsb2IoKTtcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlQm91bmRhcmllcyA9IGNhbGN1bGF0ZUVmZmVjdGl2ZUJvdW5kYXJpZXMob3JpZ2luYWxCbG9iLCBib3VuZGFyaWVzLnN0YXJ0LCBib3VuZGFyaWVzLmVuZCk7XG4gICAgICAgIGNvbnN0IHNsaWNlZEJsb2IgPSBvcmlnaW5hbEJsb2Iuc2xpY2UoZWZmZWN0aXZlQm91bmRhcmllcy5zdGFydCwgZWZmZWN0aXZlQm91bmRhcmllcy5lbmQpO1xuICAgICAgICBjb25zdCBzbGljZWRCbG9iU2l6ZSA9IHNsaWNlZEJsb2Iuc2l6ZTtcbiAgICAgICAgY29uc3Qgc2xpY2VkUmVzcG9uc2UgPSBuZXcgUmVzcG9uc2Uoc2xpY2VkQmxvYiwge1xuICAgICAgICAgICAgc3RhdHVzOiAyMDYsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiBcIlBhcnRpYWwgQ29udGVudFwiLFxuICAgICAgICAgICAgaGVhZGVyczogb3JpZ2luYWxSZXNwb25zZS5oZWFkZXJzXG4gICAgICAgIH0pO1xuICAgICAgICBzbGljZWRSZXNwb25zZS5oZWFkZXJzLnNldChcIkNvbnRlbnQtTGVuZ3RoXCIsIFN0cmluZyhzbGljZWRCbG9iU2l6ZSkpO1xuICAgICAgICBzbGljZWRSZXNwb25zZS5oZWFkZXJzLnNldChcIkNvbnRlbnQtUmFuZ2VcIiwgYGJ5dGVzICR7ZWZmZWN0aXZlQm91bmRhcmllcy5zdGFydH0tJHtlZmZlY3RpdmVCb3VuZGFyaWVzLmVuZCAtIDF9L2AgKyBgJHtvcmlnaW5hbEJsb2Iuc2l6ZX1gKTtcbiAgICAgICAgcmV0dXJuIHNsaWNlZFJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiVW5hYmxlIHRvIGNvbnN0cnVjdCBhIHBhcnRpYWwgcmVzcG9uc2U7IHJldHVybmluZyBhIFwiICsgXCI0MTYgUmFuZ2UgTm90IFNhdGlzZmlhYmxlIHJlc3BvbnNlIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKFwiVmlldyBkZXRhaWxzIGhlcmUuXCIpO1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhlcnJvcik7XG4gICAgICAgICAgICBsb2dnZXIubG9nKHJlcXVlc3QpO1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhvcmlnaW5hbFJlc3BvbnNlKTtcbiAgICAgICAgICAgIGxvZ2dlci5ncm91cEVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoXCJcIiwge1xuICAgICAgICAgICAgc3RhdHVzOiA0MTYsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiBcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmNsYXNzIFJhbmdlUmVxdWVzdHNQbHVnaW4ge1xuICAgIGNhY2hlZFJlc3BvbnNlV2lsbEJlVXNlZCA9IGFzeW5jICh7IHJlcXVlc3QsIGNhY2hlZFJlc3BvbnNlIH0pPT57XG4gICAgICAgIGlmIChjYWNoZWRSZXNwb25zZSAmJiByZXF1ZXN0LmhlYWRlcnMuaGFzKFwicmFuZ2VcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVQYXJ0aWFsUmVzcG9uc2UocmVxdWVzdCwgY2FjaGVkUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZWRSZXNwb25zZTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBkZWZhdWx0SGVhZGVyc1RvQ2hlY2sgYXMgQlJPQURDQVNUX1VQREFURV9ERUZBVUxUX0hFQURFUlMsIENBQ0hFX1VQREFURURfTUVTU0FHRV9NRVRBIGFzIEJST0FEQ0FTVF9VUERBVEVfTUVTU0FHRV9NRVRBLCBDQUNIRV9VUERBVEVEX01FU1NBR0VfVFlQRSBhcyBCUk9BRENBU1RfVVBEQVRFX01FU1NBR0VfVFlQRSwgQnJvYWRjYXN0Q2FjaGVVcGRhdGUsIEJyb2FkY2FzdFVwZGF0ZVBsdWdpbiwgQ2FjaGVFeHBpcmF0aW9uLCBDYWNoZWFibGVSZXNwb25zZSwgQ2FjaGVhYmxlUmVzcG9uc2VQbHVnaW4sIEV4cGlyYXRpb25QbHVnaW4sIFJhbmdlUmVxdWVzdHNQbHVnaW4sIGNyZWF0ZVBhcnRpYWxSZXNwb25zZSwgcmVzcG9uc2VzQXJlU2FtZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.plugins.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.strategies.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.strategies.js ***!
  \****************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheFirst: function() { return /* binding */ CacheFirst; },\n/* harmony export */   CacheOnly: function() { return /* binding */ CacheOnly; },\n/* harmony export */   NetworkFirst: function() { return /* reexport safe */ _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a; },\n/* harmony export */   NetworkOnly: function() { return /* reexport safe */ _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.N; },\n/* harmony export */   StaleWhileRevalidate: function() { return /* binding */ StaleWhileRevalidate; },\n/* harmony export */   Strategy: function() { return /* reexport safe */ _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S; },\n/* harmony export */   StrategyHandler: function() { return /* reexport safe */ _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.a; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"./node_modules/.pnpm/@serwist+core@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/Strategy.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n/* harmony import */ var _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/NetworkOnly.js */ \"./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n\n\n\n\n\n\nclass CacheFirst extends _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"makeRequest\",\n                paramName: \"request\"\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (true) {\n                logs.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            } catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (true) {\n                if (response) {\n                    logs.push(\"Got response from network.\");\n                } else {\n                    logs.push(\"Unable to get a response from the network.\");\n                }\n            }\n        } else {\n            if (true) {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(log);\n            }\n            _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\nclass CacheOnly extends _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    async _handle(request, handler) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"makeRequest\",\n                paramName: \"request\"\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.strategyStart(this.constructor.name, request));\n            if (response) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Found a cached response in the '${this.cacheName}' cache.`);\n                _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.printFinalResponse(response);\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n}\n\nclass StaleWhileRevalidate extends _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    constructor(options = {}){\n        super(options);\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.c);\n        }\n    }\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"request\"\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(()=>{});\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (response) {\n            if (true) {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);\n            }\n        } else {\n            if (true) {\n                logs.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            } catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(log);\n            }\n            _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/@serwist+sw@9.0.0-preview.21_typescript@5.4.5/node_modules/@serwist/sw/dist/index.strategies.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteDB: function() { return /* binding */ deleteDB; },\n/* harmony export */   openDB: function() { return /* binding */ openDB; },\n/* harmony export */   unwrap: function() { return /* binding */ unwrap; },\n/* harmony export */   wrap: function() { return /* binding */ wrap; }\n/* harmony export */ });\nconst instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js\n"));

/***/ }),

/***/ "./app/sw.js":
/*!*******************!*\
  !*** ./app/sw.js ***!
  \*******************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _serwist_next_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/next/worker */ \"./node_modules/.pnpm/@serwist+next@9.0.0-preview.21_next@14.2.1_typescript@5.4.5_webpack@5.91.0/node_modules/@serwist/next/dist/index.worker.js\");\n/* harmony import */ var serwist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! serwist */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/index.js\");\n\n\nconst serwist = new serwist__WEBPACK_IMPORTED_MODULE_1__.Serwist({\n    precacheEntries: undefined,\n    skipWaiting: true,\n    clientsClaim: true,\n    navigationPreload: true,\n    runtimeCaching: _serwist_next_worker__WEBPACK_IMPORTED_MODULE_0__.defaultCache\n});\nserwist.addEventListeners();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                /* unsupported import.meta.webpackHot */ undefined.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvc3cuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQW1EO0FBQ2xCO0FBRWpDLE1BQU1FLFVBQVUsSUFBSUQsNENBQU9BLENBQUM7SUFDMUJFLGlCQUFpQkMsS0FBS0MsYUFBYTtJQUNuQ0MsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLG1CQUFtQjtJQUNuQkMsZ0JBQWdCVCw4REFBWUE7QUFDOUI7QUFFQUUsUUFBUVEsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9zdy5qcz9lODQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHRDYWNoZSB9IGZyb20gJ0BzZXJ3aXN0L25leHQvd29ya2VyJ1xuaW1wb3J0IHsgU2Vyd2lzdCB9IGZyb20gJ3Nlcndpc3QnXG5cbmNvbnN0IHNlcndpc3QgPSBuZXcgU2Vyd2lzdCh7XG4gIHByZWNhY2hlRW50cmllczogc2VsZi5fX1NXX01BTklGRVNULFxuICBza2lwV2FpdGluZzogdHJ1ZSxcbiAgY2xpZW50c0NsYWltOiB0cnVlLFxuICBuYXZpZ2F0aW9uUHJlbG9hZDogdHJ1ZSxcbiAgcnVudGltZUNhY2hpbmc6IGRlZmF1bHRDYWNoZSxcbn0pXG5cbnNlcndpc3QuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuIl0sIm5hbWVzIjpbImRlZmF1bHRDYWNoZSIsIlNlcndpc3QiLCJzZXJ3aXN0IiwicHJlY2FjaGVFbnRyaWVzIiwic2VsZiIsIl9fU1dfTUFOSUZFU1QiLCJza2lwV2FpdGluZyIsImNsaWVudHNDbGFpbSIsIm5hdmlnYXRpb25QcmVsb2FkIiwicnVudGltZUNhY2hpbmciLCJhZGRFdmVudExpc3RlbmVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/sw.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/NetworkOnly.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/NetworkOnly.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N: function() { return /* binding */ NetworkOnly; },\n/* harmony export */   S: function() { return /* binding */ Strategy; },\n/* harmony export */   a: function() { return /* binding */ NetworkFirst; },\n/* harmony export */   b: function() { return /* binding */ StrategyHandler; },\n/* harmony export */   c: function() { return /* binding */ cacheOkAndOpaquePlugin; },\n/* harmony export */   m: function() { return /* binding */ messages; }\n/* harmony export */ });\n/* harmony import */ var _timeout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeout.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js\");\n\n\nfunction toRequest(input) {\n    return typeof input === \"string\" ? new Request(input) : input;\n}\nclass StrategyHandler {\n    event;\n    request;\n    url;\n    params;\n    _cacheKeys = {};\n    _strategy;\n    _handlerDeferred;\n    _extendLifetimePromises;\n    _plugins;\n    _pluginStateMap;\n    constructor(strategy, options){\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(options.event, ExtendableEvent, {\n                moduleName: \"serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.event\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(options.request, Request, {\n                moduleName: \"serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.request\"\n            });\n        }\n        this.event = options.event;\n        this.request = options.request;\n        if (options.url) {\n            this.url = options.url;\n            this.params = options.params;\n        }\n        this._strategy = strategy;\n        this._handlerDeferred = new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.D();\n        this._extendLifetimePromises = [];\n        this._plugins = [\n            ...strategy.plugins\n        ];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins){\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === \"navigate\" && event instanceof FetchEvent && event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Using a preloaded navigation response for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        const originalRequest = this.hasCallback(\"fetchDidFail\") ? request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks(\"requestWillFetch\")){\n                request = await cb({\n                    request: request.clone(),\n                    event\n                });\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"plugin-error-request-will-fetch\", {\n                    thrownErrorMessage: err.message\n                });\n            }\n        }\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            fetchResponse = await fetch(request, request.mode === \"navigate\" ? undefined : this._strategy.fetchOptions);\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`Network request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}' returned a response with status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks(\"fetchDidSucceed\")){\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse\n                });\n            }\n            return fetchResponse;\n        } catch (error) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Network request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}' threw an error.`, error);\n            }\n            if (originalRequest) {\n                await this.runCallbacks(\"fetchDidFail\", {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone()\n                });\n            }\n            throw error;\n        }\n    }\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, \"read\");\n        const multiMatchOptions = {\n            ...matchOptions,\n            ...{\n                cacheName\n            }\n        };\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (true) {\n            if (cachedResponse) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`Found a cached response in '${cacheName}'.`);\n            } else {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cachedResponseWillBeUsed\")){\n            cachedResponse = await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event\n            }) || undefined;\n        }\n        return cachedResponse;\n    }\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        await (0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.t)(0);\n        const effectiveRequest = await this.getCacheKey(request, \"write\");\n        if (true) {\n            if (effectiveRequest.method && effectiveRequest.method !== \"GET\") {\n                throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"attempt-to-cache-non-get-request\", {\n                    url: (0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(effectiveRequest.url),\n                    method: effectiveRequest.method\n                });\n            }\n        }\n        if (!response) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.error(`Cannot cache non-existent response for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(effectiveRequest.url)}'.`);\n            }\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"cache-put-with-no-response\", {\n                url: (0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(effectiveRequest.url)\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`Response '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(effectiveRequest.url)}' will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        if (true) {\n            const vary = response.headers.get(\"Vary\");\n            if (vary && matchOptions?.ignoreVary !== true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`The response for ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(effectiveRequest.url)} has a 'Vary: ${vary}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        const hasCacheUpdateCallback = this.hasCallback(\"cacheDidUpdate\");\n        const oldResponse = hasCacheUpdateCallback ? await (0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.a)(cache, effectiveRequest.clone(), [\n            \"__WB_REVISION__\"\n        ], matchOptions) : null;\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`Updating the '${cacheName}' cache with a new Response for ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        } catch (error) {\n            if (error instanceof Error) {\n                if (error.name === \"QuotaExceededError\") {\n                    await (0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.e)();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cacheDidUpdate\")){\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event\n            });\n        }\n        return true;\n    }\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks(\"cacheKeyWillBeUsed\")){\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    params: this.params\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins){\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)){\n            await callback(param);\n        }\n    }\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins){\n            if (typeof plugin[name] === \"function\") {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param)=>{\n                    const statefulParam = {\n                        ...param,\n                        state\n                    };\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    async doneWaiting() {\n        let promise = undefined;\n        while(promise = this._extendLifetimePromises.shift()){\n            await promise;\n        }\n    }\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks(\"cacheWillUpdate\")){\n            responseToCache = await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n            }) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (true) {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`);\n                        } else {\n                            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`The response for '${this.request.url}' returned a status code of '${response.status}' and won't be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\n\nclass Strategy {\n    cacheName;\n    plugins;\n    fetchOptions;\n    matchOptions;\n    constructor(options = {}){\n        this.cacheName = _timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getRuntimeName(options.cacheName);\n        this.plugins = options.plugins || [];\n        this.fetchOptions = options.fetchOptions;\n        this.matchOptions = options.matchOptions;\n    }\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    handleAll(options) {\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === \"string\" ? new Request(options.request) : options.request;\n        const handler = new StrategyHandler(this, options.url ? {\n            event,\n            request,\n            url: options.url,\n            params: options.params\n        } : {\n            event,\n            request\n        });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        return [\n            responseDone,\n            handlerDone\n        ];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks(\"handlerWillStart\", {\n            event,\n            request\n        });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            if (response === undefined || response.type === \"error\") {\n                throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"no-response\", {\n                    url: request.url\n                });\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks(\"handlerDidError\")){\n                    response = await callback({\n                        error,\n                        event,\n                        request\n                    });\n                    if (response !== undefined) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            if (true) {\n                throw _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`While responding to '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}', an ${error instanceof Error ? error.toString() : \"\"} error occurred. Using a fallback response provided by a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks(\"handlerWillRespond\")){\n            response = await callback({\n                event,\n                request,\n                response\n            });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response = undefined;\n        let error = undefined;\n        try {\n            response = await responseDone;\n        } catch (error) {}\n        try {\n            await handler.runCallbacks(\"handlerDidRespond\", {\n                event,\n                request,\n                response\n            });\n            await handler.doneWaiting();\n        } catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks(\"handlerDidComplete\", {\n            event,\n            request,\n            response,\n            error\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\n\nconst cacheOkAndOpaquePlugin = {\n    cacheWillUpdate: async ({ response })=>{\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    }\n};\n\nconst messages = {\n    strategyStart: (strategyName, request)=>`Using ${strategyName} to respond to '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}'`,\n    printFinalResponse: (response)=>{\n        if (response) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(\"View the final response here.\");\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(response || \"[No response returned]\");\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n        }\n    }\n};\n\nclass NetworkFirst extends Strategy {\n    _networkTimeoutSeconds;\n    constructor(options = {}){\n        super(options);\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (true) {\n            if (this._networkTimeoutSeconds) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(this._networkTimeoutSeconds, \"number\", {\n                    moduleName: \"serwist/strategies\",\n                    className: this.constructor.name,\n                    funcName: \"constructor\",\n                    paramName: \"networkTimeoutSeconds\"\n                });\n            }\n        }\n    }\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(request, Request, {\n                moduleName: \"serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"makeRequest\"\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({\n                request,\n                logs,\n                handler\n            });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async ()=>{\n            return await handler.waitUntil(Promise.race(promises)) || await networkPromise;\n        })());\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(log);\n            }\n            messages.printFinalResponse(response);\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n        }\n        if (!response) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve)=>{\n            const onNetworkTimeout = async ()=>{\n                if (true) {\n                    logs.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId\n        };\n    }\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error = undefined;\n        let response = undefined;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        } catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (true) {\n            if (response) {\n                logs.push(\"Got response from network.\");\n            } else {\n                logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (true) {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n                } else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\n\nclass NetworkOnly extends Strategy {\n    _networkTimeoutSeconds;\n    constructor(options = {}){\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    async _handle(request, handler) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(request, Request, {\n                moduleName: \"serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"_handle\",\n                paramName: \"request\"\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request)\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = (0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.t)(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`);\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Got response from network.\");\n            } else {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Unable to get a response from the network.\");\n            }\n            messages.printFinalResponse(response);\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n        }\n        if (!response) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/NetworkOnly.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/PrecacheFallbackPlugin.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/PrecacheFallbackPlugin.js ***!
  \*********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: function() { return /* binding */ BackgroundSyncPlugin; },\n/* harmony export */   P: function() { return /* binding */ PrecacheFallbackPlugin; },\n/* harmony export */   Q: function() { return /* binding */ Queue; },\n/* harmony export */   R: function() { return /* binding */ Route; },\n/* harmony export */   S: function() { return /* binding */ StorableRequest; },\n/* harmony export */   a: function() { return /* binding */ QueueStore; },\n/* harmony export */   d: function() { return /* binding */ defaultMethod; },\n/* harmony export */   i: function() { return /* binding */ initialize; },\n/* harmony export */   n: function() { return /* binding */ normalizeHandler; }\n/* harmony export */ });\n/* harmony import */ var _timeout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeout.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js\");\n/* harmony import */ var _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NetworkOnly.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! idb */ \"./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js\");\n\n\n\n\nconst defaultMethod = \"GET\";\nconst validMethods = [\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\"\n];\n\nconst normalizeHandler = (handler)=>{\n    if (handler && typeof handler === \"object\") {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.hasMethod(handler, \"handle\", {\n                moduleName: \"serwist\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"handler\"\n            });\n        }\n        return handler;\n    }\n    if (true) {\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(handler, \"function\", {\n            moduleName: \"serwist\",\n            className: \"Route\",\n            funcName: \"constructor\",\n            paramName: \"handler\"\n        });\n    }\n    return {\n        handle: handler\n    };\n};\n\nclass Route {\n    handler;\n    match;\n    method;\n    catchHandler;\n    constructor(match, handler, method = defaultMethod){\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(match, \"function\", {\n                moduleName: \"serwist\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"match\"\n            });\n            if (method) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isOneOf(method, validMethods, {\n                    paramName: \"method\"\n                });\n            }\n        }\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\n\nconst DB_VERSION = 3;\nconst DB_NAME = \"serwist-background-sync\";\nconst REQUEST_OBJECT_STORE_NAME = \"requests\";\nconst QUEUE_NAME_INDEX = \"queueName\";\nclass QueueDb {\n    _db = null;\n    async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.openCursor();\n        return cursor?.value.id;\n    }\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    async getEntryCountByQueueName(queueName) {\n        const db = await this.getDb();\n        return db.countFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n    }\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"next\");\n    }\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"prev\");\n    }\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.index(QUEUE_NAME_INDEX).openCursor(query, direction);\n        return cursor?.value;\n    }\n    async getDb() {\n        if (!this._db) {\n            this._db = await (0,idb__WEBPACK_IMPORTED_MODULE_2__.openDB)(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb\n            });\n        }\n        return this._db;\n    }\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: \"id\"\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, {\n            unique: false\n        });\n    }\n}\n\nclass QueueStore {\n    _queueName;\n    _queueDb;\n    constructor(queueName){\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    async pushEntry(entry) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(entry, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(entry.requestData, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    async unshiftEntry(entry) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(entry, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(entry.requestData, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            entry.id = firstId - 1;\n        } else {\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    async size() {\n        return await this._queueDb.getEntryCountByQueueName(this._queueName);\n    }\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n\nconst serializableProperties = [\n    \"method\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"mode\",\n    \"credentials\",\n    \"cache\",\n    \"redirect\",\n    \"integrity\",\n    \"keepalive\"\n];\nclass StorableRequest {\n    _requestData;\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {}\n        };\n        if (request.method !== \"GET\") {\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        request.headers.forEach((value, key)=>{\n            requestData.headers[key] = value;\n        });\n        for (const prop of serializableProperties){\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    constructor(requestData){\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(requestData, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(requestData.url, \"string\", {\n                moduleName: \"serwist/plugins\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData.url\"\n            });\n        }\n        if (requestData.mode === \"navigate\") {\n            requestData.mode = \"same-origin\";\n        }\n        this._requestData = requestData;\n    }\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\n\nconst TAG_PREFIX = \"serwist-background-sync\";\nconst MAX_RETENTION_TIME$1 = 60 * 24 * 7;\nconst queueNames = new Set();\nconst convertEntry = (queueStoreEntry)=>{\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\nclass Queue {\n    _name;\n    _onSync;\n    _maxRetentionTime;\n    _queueStore;\n    _forceSyncFallback;\n    _syncInProgress = false;\n    _requestsAddedDuringSync = false;\n    constructor(name, { forceSyncFallback, onSync, maxRetentionTime } = {}){\n        if (queueNames.has(name)) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"duplicate-queue-name\", {\n                name\n            });\n        }\n        queueNames.add(name);\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME$1;\n        this._forceSyncFallback = Boolean(forceSyncFallback);\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    get name() {\n        return this._name;\n    }\n    async pushRequest(entry) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(entry, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(entry.request, Request, {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"push\");\n    }\n    async unshiftRequest(entry) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(entry, \"object\", {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(entry.request, Request, {\n                moduleName: \"serwist/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"unshift\");\n    }\n    async popRequest() {\n        return this._removeRequest(\"pop\");\n    }\n    async shiftRequest() {\n        return this._removeRequest(\"shift\");\n    }\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries){\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            } else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    async size() {\n        return await this._queueStore.size();\n    }\n    async _addRequest({ request, metadata, timestamp = Date.now() }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp\n        };\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        switch(operation){\n            case \"push\":\n                await this._queueStore.pushEntry(entry);\n                break;\n            case \"unshift\":\n                await this._queueStore.unshiftEntry(entry);\n                break;\n        }\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}' has ` + `been added to background sync queue '${this._name}'.`);\n        }\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        } else {\n            await this.registerSync();\n        }\n    }\n    async _removeRequest(operation) {\n        const now = Date.now();\n        let entry;\n        switch(operation){\n            case \"pop\":\n                entry = await this._queueStore.popEntry();\n                break;\n            case \"shift\":\n                entry = await this._queueStore.shiftEntry();\n                break;\n        }\n        if (entry) {\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        return undefined;\n    }\n    async replayRequests() {\n        let entry = undefined;\n        while(entry = await this.shiftRequest()){\n            try {\n                await fetch(entry.request.clone());\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(entry.request.url)}' ` + `has been replayed in queue '${this._name}'`);\n                }\n            } catch (error) {\n                await this.unshiftRequest(entry);\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(entry.request.url)}' ` + `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"queue-replay-failed\", {\n                    name: this._name\n                });\n            }\n        }\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`);\n        }\n    }\n    async registerSync() {\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            } catch (err) {\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    _addSyncListener() {\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            self.addEventListener(\"sync\", (event)=>{\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (true) {\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Background sync for tag '${event.tag}' has been received`);\n                    }\n                    const syncComplete = async ()=>{\n                        this._syncInProgress = true;\n                        let syncError = undefined;\n                        try {\n                            await this._onSync({\n                                queue: this\n                            });\n                        } catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                throw syncError;\n                            }\n                        } finally{\n                            if (this._requestsAddedDuringSync && !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        } else {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Background sync replaying without background sync event\");\n            }\n            void this._onSync({\n                queue: this\n            });\n        }\n    }\n    static get _queueNames() {\n        return queueNames;\n    }\n}\n\nclass BackgroundSyncPlugin {\n    _queue;\n    constructor(name, options){\n        this._queue = new Queue(name, options);\n    }\n    async fetchDidFail({ request }) {\n        await this._queue.pushRequest({\n            request\n        });\n    }\n}\n\nconst QUEUE_NAME = \"serwist-google-analytics\";\nconst MAX_RETENTION_TIME = 60 * 48;\nconst GOOGLE_ANALYTICS_HOST = \"www.google-analytics.com\";\nconst GTM_HOST = \"www.googletagmanager.com\";\nconst ANALYTICS_JS_PATH = \"/analytics.js\";\nconst GTAG_JS_PATH = \"/gtag/js\";\nconst GTM_JS_PATH = \"/gtm.js\";\nconst COLLECT_PATHS_REGEX = /^\\/(\\w+\\/)?collect/;\n\nconst createOnSyncCallback = (config)=>{\n    return async ({ queue })=>{\n        let entry = undefined;\n        while(entry = await queue.shiftRequest()){\n            const { request, timestamp } = entry;\n            const url = new URL(request.url);\n            try {\n                const params = request.method === \"POST\" ? new URLSearchParams(await request.clone().text()) : url.searchParams;\n                const originalHitTime = timestamp - (Number(params.get(\"qt\")) || 0);\n                const queueTime = Date.now() - originalHitTime;\n                params.set(\"qt\", String(queueTime));\n                if (config.parameterOverrides) {\n                    for (const param of Object.keys(config.parameterOverrides)){\n                        const value = config.parameterOverrides[param];\n                        params.set(param, value);\n                    }\n                }\n                if (typeof config.hitFilter === \"function\") {\n                    config.hitFilter.call(null, params);\n                }\n                await fetch(new Request(url.origin + url.pathname, {\n                    body: params.toString(),\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"text/plain\"\n                    }\n                }));\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url.href)}' has been replayed`);\n                }\n            } catch (err) {\n                await queue.unshiftRequest(entry);\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Request for '${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url.href)}' failed to replay, putting it back in the queue.`);\n                }\n                throw err;\n            }\n        }\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"All Google Analytics request successfully replayed; \" + \"the queue is now empty!\");\n        }\n    };\n};\nconst createCollectRoutes = (bgSyncPlugin)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && COLLECT_PATHS_REGEX.test(url.pathname);\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_1__.N({\n        plugins: [\n            bgSyncPlugin\n        ]\n    });\n    return [\n        new Route(match, handler, \"GET\"),\n        new Route(match, handler, \"POST\")\n    ];\n};\nconst createAnalyticsJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && url.pathname === ANALYTICS_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_1__.a({\n        cacheName\n    });\n    return new Route(match, handler, \"GET\");\n};\nconst createGtagJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTAG_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_1__.a({\n        cacheName\n    });\n    return new Route(match, handler, \"GET\");\n};\nconst createGtmJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTM_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_1__.a({\n        cacheName\n    });\n    return new Route(match, handler, \"GET\");\n};\nconst initialize = ({ serwist, cacheName, ...options })=>{\n    const resolvedCacheName = _timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getGoogleAnalyticsName(cacheName);\n    const bgSyncPlugin = new BackgroundSyncPlugin(QUEUE_NAME, {\n        maxRetentionTime: MAX_RETENTION_TIME,\n        onSync: createOnSyncCallback(options)\n    });\n    const routes = [\n        createGtmJsRoute(resolvedCacheName),\n        createAnalyticsJsRoute(resolvedCacheName),\n        createGtagJsRoute(resolvedCacheName),\n        ...createCollectRoutes(bgSyncPlugin)\n    ];\n    for (const route of routes){\n        serwist.registerRoute(route);\n    }\n};\n\nclass PrecacheFallbackPlugin {\n    _fallbackUrls;\n    _serwist;\n    constructor({ fallbackUrls, serwist }){\n        this._fallbackUrls = fallbackUrls;\n        this._serwist = serwist;\n    }\n    async handlerDidError(param) {\n        for (const fallback of this._fallbackUrls){\n            if (typeof fallback === \"string\") {\n                const fallbackResponse = await this._serwist.matchPrecache(fallback);\n                if (fallbackResponse !== undefined) {\n                    return fallbackResponse;\n                }\n            } else if (fallback.matcher(param)) {\n                const fallbackResponse = await this._serwist.matchPrecache(fallback.url);\n                if (fallbackResponse !== undefined) {\n                    return fallbackResponse;\n                }\n            }\n        }\n        return undefined;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/PrecacheFallbackPlugin.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/Serwist.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/Serwist.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N: function() { return /* binding */ NavigationRoute; },\n/* harmony export */   P: function() { return /* binding */ PrecacheRoute; },\n/* harmony export */   R: function() { return /* binding */ RegExpRoute; },\n/* harmony export */   S: function() { return /* binding */ Serwist; },\n/* harmony export */   a: function() { return /* binding */ clientsClaim; },\n/* harmony export */   b: function() { return /* binding */ copyResponse; },\n/* harmony export */   c: function() { return /* binding */ cleanupOutdatedCaches; },\n/* harmony export */   d: function() { return /* binding */ disableDevLogs; },\n/* harmony export */   e: function() { return /* binding */ disableNavigationPreload; },\n/* harmony export */   f: function() { return /* binding */ enableNavigationPreload; },\n/* harmony export */   g: function() { return /* binding */ PrecacheStrategy; },\n/* harmony export */   h: function() { return /* binding */ createCacheKey; },\n/* harmony export */   i: function() { return /* binding */ isNavigationPreloadSupported; },\n/* harmony export */   j: function() { return /* binding */ parallel; },\n/* harmony export */   k: function() { return /* binding */ printInstallDetails; },\n/* harmony export */   l: function() { return /* binding */ printCleanupDetails; },\n/* harmony export */   m: function() { return /* binding */ PrecacheInstallReportPlugin; },\n/* harmony export */   n: function() { return /* binding */ generateURLVariations; },\n/* harmony export */   p: function() { return /* binding */ parseRoute; },\n/* harmony export */   s: function() { return /* binding */ setCacheNameDetails; }\n/* harmony export */ });\n/* harmony import */ var _timeout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeout.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js\");\n/* harmony import */ var _waitUntil_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waitUntil.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/waitUntil.js\");\n/* harmony import */ var _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PrecacheFallbackPlugin.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/PrecacheFallbackPlugin.js\");\n/* harmony import */ var _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NetworkOnly.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/NetworkOnly.js\");\n\n\n\n\n\nconst SUBSTRING_TO_FIND = \"-precache-\";\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND)=>{\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName)=>{\n        return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName)=>self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\n\nconst cleanupOutdatedCaches = (cacheName)=>{\n    self.addEventListener(\"activate\", (event)=>{\n        event.waitUntil(deleteOutdatedCaches(_timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrecacheName(cacheName)).then((cachesDeleted)=>{\n            if (true) {\n                if (cachesDeleted.length > 0) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"The following out-of-date precaches were cleaned up automatically:\", cachesDeleted);\n                }\n            }\n        }));\n    });\n};\n\nconst clientsClaim = ()=>{\n    self.addEventListener(\"activate\", ()=>self.clients.claim());\n};\n\nconst copyResponse = async (response, modifier)=>{\n    let origin = null;\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"cross-origin-copy-response\", {\n            origin\n        });\n    }\n    const clonedResponse = response.clone();\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText\n    };\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    const body = (0,_waitUntil_js__WEBPACK_IMPORTED_MODULE_1__.c)() ? clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n};\n\nconst disableDevLogs = ()=>{\n    self.__WB_DISABLE_DEV_LOGS = true;\n};\n\nconst isNavigationPreloadSupported = ()=>{\n    return Boolean(self.registration?.navigationPreload);\n};\nconst enableNavigationPreload = (headerValue)=>{\n    if (isNavigationPreloadSupported()) {\n        self.addEventListener(\"activate\", (event)=>{\n            event.waitUntil(self.registration.navigationPreload.enable().then(()=>{\n                if (headerValue) {\n                    void self.registration.navigationPreload.setHeaderValue(headerValue);\n                }\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Navigation preloading is enabled.\");\n                }\n            }));\n        });\n    } else {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Navigation preloading is not supported in this browser.\");\n        }\n    }\n};\nconst disableNavigationPreload = ()=>{\n    if (isNavigationPreloadSupported()) {\n        self.addEventListener(\"activate\", (event)=>{\n            event.waitUntil(self.registration.navigationPreload.disable().then(()=>{\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Navigation preloading is disabled.\");\n                }\n            }));\n        });\n    } else {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Navigation preloading is not supported in this browser.\");\n        }\n    }\n};\n\nclass NavigationRoute extends _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.R {\n    _allowlist;\n    _denylist;\n    constructor(handler, { allowlist = [\n        /./\n    ], denylist = [] } = {}){\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isArrayOfClass(allowlist, RegExp, {\n                moduleName: \"serwist\",\n                className: \"NavigationRoute\",\n                funcName: \"constructor\",\n                paramName: \"options.allowlist\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isArrayOfClass(denylist, RegExp, {\n                moduleName: \"serwist\",\n                className: \"NavigationRoute\",\n                funcName: \"constructor\",\n                paramName: \"options.denylist\"\n            });\n        }\n        super((options)=>this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    _match({ url, request }) {\n        if (request && request.mode !== \"navigate\") {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist){\n            if (regExp.test(pathnameAndSearch)) {\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL matches this denylist pattern: ${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp)=>regExp.test(pathnameAndSearch))) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`The navigation route ${pathnameAndSearch} is being used.`);\n            }\n            return true;\n        }\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL being navigated to doesn't match the allowlist.`);\n        }\n        return false;\n    }\n}\n\nclass RegExpRoute extends _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.R {\n    constructor(regExp, handler, method){\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(regExp, RegExp, {\n                moduleName: \"serwist\",\n                className: \"RegExpRoute\",\n                funcName: \"constructor\",\n                paramName: \"pattern\"\n            });\n        }\n        const match = ({ url })=>{\n            const result = regExp.exec(url.href);\n            if (!result) {\n                return;\n            }\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (true) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`The regular expression '${regExp.toString()}' only partially matched against the cross-origin URL '${url.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\n\nconst parseRoute = (capture, handler, method)=>{\n    let route;\n    if (typeof capture === \"string\") {\n        const captureUrl = new URL(capture, location.href);\n        if (true) {\n            if (!(capture.startsWith(\"/\") || capture.startsWith(\"http\"))) {\n                throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-string\", {\n                    moduleName: \"serwist\",\n                    funcName: \"parseRoute\",\n                    paramName: \"capture\"\n                });\n            }\n            const valueToCheck = capture.startsWith(\"http\") ? captureUrl.pathname : capture;\n            const wildcards = \"[*:?+]\";\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`The '$capture' parameter contains an Express-style wildcard character (${wildcards}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url })=>{\n            if (true) {\n                if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`${capture} only partially matches the cross-origin URL ${url.toString()}. This route will only handle cross-origin requests if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        route = new _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.R(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n        route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === \"function\") {\n        route = new _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.R(capture, handler, method);\n    } else if (capture instanceof _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.R) {\n        route = capture;\n    } else {\n        throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"unsupported-route-type\", {\n            moduleName: \"serwist\",\n            funcName: \"parseRoute\",\n            paramName: \"capture\"\n        });\n    }\n    return route;\n};\n\nconst removeIgnoredSearchParams = (urlObject, ignoreURLParametersMatching = [])=>{\n    for (const paramName of [\n        ...urlObject.searchParams.keys()\n    ]){\n        if (ignoreURLParametersMatching.some((regExp)=>regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n};\n\nfunction* generateURLVariations(url, { directoryIndex = \"index.html\", ignoreURLParametersMatching = [\n    /^utm_/,\n    /^fbclid$/\n], cleanURLs = true, urlManipulation } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = \"\";\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith(\"/\")) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += \".html\";\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({\n            url: urlObject\n        });\n        for (const urlToAttempt of additionalURLs){\n            yield urlToAttempt.href;\n        }\n    }\n}\n\nclass PrecacheRoute extends _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.R {\n    constructor(serwist, options){\n        const match = ({ request })=>{\n            const urlsToCacheKeys = serwist.getUrlsToPrecacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)){\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = serwist.getIntegrityForPrecacheKey(cacheKey);\n                    return {\n                        cacheKey,\n                        integrity\n                    };\n                }\n            }\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`Precaching did not find a match for ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}.`);\n            }\n            return;\n        };\n        super(match, serwist.precacheStrategy);\n    }\n}\n\nclass PrecacheStrategy extends _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_3__.S {\n    _fallbackToNetwork;\n    static defaultPrecacheCacheabilityPlugin = {\n        async cacheWillUpdate ({ response }) {\n            if (!response || response.status >= 400) {\n                return null;\n            }\n            return response;\n        }\n    };\n    static copyRedirectedCacheableResponsesPlugin = {\n        async cacheWillUpdate ({ response }) {\n            return response.redirected ? await copyResponse(response) : response;\n        }\n    };\n    constructor(options = {}){\n        options.cacheName = _timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        if (handler.event && handler.event.type === \"install\") {\n            return await this._handleInstall(request, handler);\n        }\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response = undefined;\n        const params = handler.params || {};\n        if (this._fallbackToNetwork) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.warn(`The precached response for ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)} in ${this.cacheName} was not found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== \"no-cors\" ? integrityInRequest || integrityInManifest : undefined\n            }));\n            if (integrityInManifest && noIntegrityConflict && request.mode !== \"no-cors\") {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (true) {\n                    if (wasCached) {\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`A response for ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)} was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        } else {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"missing-precache-entry\", {\n                cacheName: this.cacheName,\n                url: request.url\n            });\n        }\n        if (true) {\n            const cacheKey = params.cacheKey || await handler.getCacheKey(request, \"read\");\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(`Precaching is responding to: ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(request.url)}`);\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`Serving the precached url: ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(\"View request details here.\");\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(request);\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(\"View response details here.\");\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(response);\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"bad-precaching-response\", {\n                url: request.url,\n                status: response.status\n            });\n        }\n        return response;\n    }\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()){\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        } else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n    }\n}\n\nconst setCacheNameDetails = (details)=>{\n    if (true) {\n        for (const key of Object.keys(details)){\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(details[key], \"string\", {\n                moduleName: \"@serwist/core\",\n                funcName: \"setCacheNameDetails\",\n                paramName: `details.${key}`\n            });\n        }\n        if (details.precache?.length === 0) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"precache\",\n                value: details.precache\n            });\n        }\n        if (details.runtime?.length === 0) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"runtime\",\n                value: details.runtime\n            });\n        }\n        if (details.googleAnalytics?.length === 0) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"googleAnalytics\",\n                value: details.googleAnalytics\n            });\n        }\n    }\n    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.updateDetails(details);\n};\n\nconst parallel = async (limit, array, func)=>{\n    const work = array.map((item, index)=>({\n            index,\n            item\n        }));\n    const processor = async (res)=>{\n        const results = [];\n        while(true){\n            const next = work.pop();\n            if (!next) {\n                return res(results);\n            }\n            const result = await func(next.item);\n            results.push({\n                result: result,\n                index: next.index\n            });\n        }\n    };\n    const queues = Array.from({\n        length: limit\n    }, ()=>new Promise(processor));\n    const results = (await Promise.all(queues)).flat().sort((a, b)=>a.index < b.index ? -1 : 1).map((res)=>res.result);\n    return results;\n};\n\nclass PrecacheCacheKeyPlugin {\n    _precacheController;\n    constructor({ precacheController }){\n        this._precacheController = precacheController;\n    }\n    cacheKeyWillBeUsed = async ({ request, params })=>{\n        const cacheKey = params?.cacheKey || this._precacheController.getPrecacheKeyForUrl(request.url);\n        return cacheKey ? new Request(cacheKey, {\n            headers: request.headers\n        }) : request;\n    };\n}\n\nclass PrecacheInstallReportPlugin {\n    updatedURLs = [];\n    notUpdatedURLs = [];\n    handlerWillStart = async ({ request, state })=>{\n        if (state) {\n            state.originalRequest = request;\n        }\n    };\n    cachedResponseWillBeUsed = async ({ event, state, cachedResponse })=>{\n        if (event.type === \"install\") {\n            if (state?.originalRequest && state.originalRequest instanceof Request) {\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                } else {\n                    this.updatedURLs.push(url);\n                }\n            }\n        }\n        return cachedResponse;\n    };\n}\n\nconst REVISION_SEARCH_PARAM = \"__WB_REVISION__\";\nconst createCacheKey = (entry)=>{\n    if (!entry) {\n        throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    if (typeof entry === \"string\") {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href\n    };\n};\n\nconst logGroup = (groupTitle, deletedURLs)=>{\n    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(groupTitle);\n    for (const url of deletedURLs){\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(url);\n    }\n    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n};\nconst printCleanupDetails = (deletedURLs)=>{\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(`During precaching cleanup, ${deletionCount} cached request${deletionCount === 1 ? \" was\" : \"s were\"} deleted.`);\n        logGroup(\"Deleted Cache Requests\", deletedURLs);\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n    }\n};\n\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(groupTitle);\n    for (const url of urls){\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(url);\n    }\n    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n}\nconst printInstallDetails = (urlsToPrecache, urlsAlreadyPrecached)=>{\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? \"\" : \"s\"}.`;\n        if (alreadyPrecachedCount > 0) {\n            message += ` ${alreadyPrecachedCount} ` + `file${alreadyPrecachedCount === 1 ? \" is\" : \"s are\"} already cached.`;\n        }\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(message);\n        _nestedGroup(\"View newly precached URLs.\", urlsToPrecache);\n        _nestedGroup(\"View previously precached URLs.\", urlsAlreadyPrecached);\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n    }\n};\n\nclass Serwist {\n    _urlsToCacheKeys = new Map();\n    _urlsToCacheModes = new Map();\n    _cacheKeysToIntegrities = new Map();\n    _concurrentPrecaching;\n    _precacheStrategy;\n    _routes;\n    _defaultHandlerMap;\n    _catchHandler;\n    constructor({ precacheEntries, precacheOptions, cleanupOutdatedCaches: cleanupOutdatedCaches$1, navigateFallback, navigateFallbackAllowlist, navigateFallbackDenylist, plugins = [], fallbackToNetwork = true, concurrentPrecaching = 1, skipWaiting = false, importScripts, navigationPreload = false, cacheId, clientsClaim: clientsClaim$1 = false, runtimeCaching, offlineAnalyticsConfig, disableDevLogs: disableDevLogs$1 = false, fallbacks } = {}){\n        this._concurrentPrecaching = concurrentPrecaching;\n        this._precacheStrategy = new PrecacheStrategy({\n            cacheName: _timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrecacheName(precacheOptions?.cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({\n                    precacheController: this\n                })\n            ],\n            fallbackToNetwork\n        });\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n        this.handleInstall = this.handleInstall.bind(this);\n        this.handleActivate = this.handleActivate.bind(this);\n        this.handleFetch = this.handleFetch.bind(this);\n        this.handleCache = this.handleCache.bind(this);\n        if (!!importScripts && importScripts.length > 0) self.importScripts(...importScripts);\n        if (navigationPreload) enableNavigationPreload();\n        if (cacheId !== undefined) {\n            setCacheNameDetails({\n                prefix: cacheId\n            });\n        }\n        if (skipWaiting) {\n            self.skipWaiting();\n        } else {\n            self.addEventListener(\"message\", (event)=>{\n                if (event.data && event.data.type === \"SKIP_WAITING\") {\n                    self.skipWaiting();\n                }\n            });\n        }\n        if (clientsClaim$1) clientsClaim();\n        this.registerRoute(new PrecacheRoute(this, precacheOptions));\n        if (!!precacheEntries && precacheEntries.length > 0) {\n            this.addToPrecacheList(precacheEntries);\n        }\n        if (cleanupOutdatedCaches$1) {\n            cleanupOutdatedCaches(precacheOptions?.cacheName);\n        }\n        if (navigateFallback) {\n            this.registerRoute(new NavigationRoute(this.createHandlerBoundToUrl(navigateFallback), {\n                allowlist: navigateFallbackAllowlist,\n                denylist: navigateFallbackDenylist\n            }));\n        }\n        if (offlineAnalyticsConfig !== undefined) {\n            if (typeof offlineAnalyticsConfig === \"boolean\") {\n                offlineAnalyticsConfig && (0,_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.i)({\n                    serwist: this\n                });\n            } else {\n                (0,_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.i)({\n                    ...offlineAnalyticsConfig,\n                    serwist: this\n                });\n            }\n        }\n        if (runtimeCaching !== undefined) {\n            if (fallbacks !== undefined) {\n                const fallbackPlugin = new _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.P({\n                    fallbackUrls: fallbacks.entries,\n                    serwist: this\n                });\n                runtimeCaching.forEach((cacheEntry)=>{\n                    if (cacheEntry.handler instanceof _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_3__.S && !cacheEntry.handler.plugins.some((plugin)=>\"handlerDidError\" in plugin)) {\n                        cacheEntry.handler.plugins.push(fallbackPlugin);\n                    }\n                });\n            }\n            for (const entry of runtimeCaching){\n                this.registerCapture(entry.matcher, entry.handler, entry.method);\n            }\n        }\n        if (disableDevLogs$1) disableDevLogs();\n    }\n    get precacheStrategy() {\n        return this._precacheStrategy;\n    }\n    get routes() {\n        return this._routes;\n    }\n    addEventListeners() {\n        self.addEventListener(\"install\", this.handleInstall);\n        self.addEventListener(\"activate\", this.handleActivate);\n        self.addEventListener(\"fetch\", this.handleFetch);\n        self.addEventListener(\"message\", this.handleCache);\n    }\n    addToPrecacheList(entries) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isArray(entries, {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"addToCacheList\",\n                paramName: \"entries\"\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries){\n            if (typeof entry === \"string\") {\n                urlsToWarnAbout.push(entry);\n            } else if (entry && !entry.integrity && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== \"string\" && entry.revision ? \"reload\" : \"default\";\n            if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"add-to-cache-list-conflicting-entries\", {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey\n                });\n            }\n            if (typeof entry !== \"string\" && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"add-to-cache-list-conflicting-integrities\", {\n                        url\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Serwist is precaching URLs without revision info: ${urlsToWarnAbout.join(\", \")}\\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;\n                if (false) {} else {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.warn(warningMessage);\n                }\n            }\n        }\n    }\n    handleInstall(event) {\n        return (0,_waitUntil_js__WEBPACK_IMPORTED_MODULE_1__.w)(event, async ()=>{\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.precacheStrategy.plugins.push(installReportPlugin);\n            await parallel(this._concurrentPrecaching, Array.from(this._urlsToCacheKeys.entries()), async ([url, cacheKey])=>{\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: \"same-origin\"\n                });\n                await Promise.all(this.precacheStrategy.handleAll({\n                    event,\n                    request,\n                    url: new URL(request.url),\n                    params: {\n                        cacheKey\n                    }\n                }));\n            });\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (true) {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return {\n                updatedURLs,\n                notUpdatedURLs\n            };\n        });\n    }\n    handleActivate(event) {\n        return (0,_waitUntil_js__WEBPACK_IMPORTED_MODULE_1__.w)(event, async ()=>{\n            const cache = await self.caches.open(this.precacheStrategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedCacheRequests = [];\n            for (const request of currentlyCachedRequests){\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedCacheRequests.push(request.url);\n                }\n            }\n            if (true) {\n                printCleanupDetails(deletedCacheRequests);\n            }\n            return {\n                deletedCacheRequests\n            };\n        });\n    }\n    handleFetch(event) {\n        const { request } = event;\n        const responsePromise = this.handleRequest({\n            request,\n            event\n        });\n        if (responsePromise) {\n            event.respondWith(responsePromise);\n        }\n    }\n    handleCache(event) {\n        if (event.data && event.data.type === \"CACHE_URLS\") {\n            const { payload } = event.data;\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(\"Caching URLs from the window\", payload.urlsToCache);\n            }\n            const requestPromises = Promise.all(payload.urlsToCache.map((entry)=>{\n                let request;\n                if (typeof entry === \"string\") {\n                    request = new Request(entry);\n                } else {\n                    request = new Request(...entry);\n                }\n                return this.handleRequest({\n                    request,\n                    event\n                });\n            }));\n            event.waitUntil(requestPromises);\n            if (event.ports?.[0]) {\n                void requestPromises.then(()=>event.ports[0].postMessage(true));\n            }\n        }\n    }\n    setDefaultHandler(handler, method = _PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.d) {\n        this._defaultHandlerMap.set(method, (0,_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.n)(handler));\n    }\n    setCatchHandler(handler) {\n        this._catchHandler = (0,_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_2__.n)(handler);\n    }\n    registerCapture(capture, handler, method) {\n        const route = parseRoute(capture, handler, method);\n        this.registerRoute(route);\n        return route;\n    }\n    registerRoute(route) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(route, \"object\", {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.hasMethod(route, \"match\", {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(route.handler, \"object\", {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.hasMethod(route.handler, \"handle\", {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"registerRoute\",\n                paramName: \"route.handler\"\n            });\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(route.method, \"string\", {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"registerRoute\",\n                paramName: \"route.method\"\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        this._routes.get(route.method).push(route);\n    }\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"unregister-route-but-not-found-with-method\", {\n                method: route.method\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        } else {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"unregister-route-route-not-registered\");\n        }\n    }\n    getUrlsToPrecacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    getPrecachedUrls() {\n        return [\n            ...this._urlsToCacheKeys.keys()\n        ];\n    }\n    getPrecacheKeyForUrl(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    getIntegrityForPrecacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getPrecacheKeyForUrl(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.precacheStrategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    createHandlerBoundToUrl(url) {\n        const cacheKey = this.getPrecacheKeyForUrl(url);\n        if (!cacheKey) {\n            throw new _timeout_js__WEBPACK_IMPORTED_MODULE_0__.S(\"non-precached-url\", {\n                url\n            });\n        }\n        return (options)=>{\n            options.request = new Request(url);\n            options.params = {\n                cacheKey,\n                ...options.params\n            };\n            return this.precacheStrategy.handle(options);\n        };\n    }\n    handleRequest({ request, event }) {\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isInstance(request, Request, {\n                moduleName: \"serwist\",\n                className: \"Serwist\",\n                funcName: \"handleRequest\",\n                paramName: \"options.request\"\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith(\"http\")) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(\"Router only supports URLs that start with 'http'.\");\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url\n        });\n        let handler = route?.handler;\n        const debugMessages = [];\n        if (true) {\n            if (handler) {\n                debugMessages.push([\n                    \"Found a route to handle this request:\",\n                    route\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params\n                    ]);\n                }\n            }\n        }\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (true) {\n                debugMessages.push(`Failed to find a matching route. Falling back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (true) {\n                _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.debug(`No route found for: ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url)}`);\n            }\n            return;\n        }\n        if (true) {\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(`Router is responding to: ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url)}`);\n            for (const msg of debugMessages){\n                if (Array.isArray(msg)) {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(...msg);\n                } else {\n                    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(msg);\n                }\n            }\n            _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n        }\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({\n                url,\n                request,\n                event,\n                params\n            });\n        } catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        const catchHandler = route?.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err)=>{\n                if (catchHandler) {\n                    if (true) {\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(`Error thrown when responding to:  ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url)}. Falling back to route's Catch Handler.`);\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.error(\"Error thrown by:\", route);\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.error(err);\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({\n                            url,\n                            request,\n                            event,\n                            params\n                        });\n                    } catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (true) {\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupCollapsed(`Error thrown when responding to:  ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url)}. Falling back to global Catch Handler.`);\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.error(\"Error thrown by:\", route);\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.error(err);\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.groupEnd();\n                    }\n                    return this._catchHandler.handle({\n                        url,\n                        request,\n                        event\n                    });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes){\n            let params;\n            const matchResult = route.match({\n                url,\n                sameOrigin,\n                request,\n                event\n            });\n            if (matchResult) {\n                if (true) {\n                    if (matchResult instanceof Promise) {\n                        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.warn(`While routing ${(0,_timeout_js__WEBPACK_IMPORTED_MODULE_0__.g)(url)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    params = undefined;\n                } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n                    params = undefined;\n                } else if (typeof matchResult === \"boolean\") {\n                    params = undefined;\n                }\n                return {\n                    route,\n                    params\n                };\n            }\n        }\n        return {};\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/Serwist.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/registerQuotaErrorCallback.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/registerQuotaErrorCallback.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   r: function() { return /* binding */ registerQuotaErrorCallback; }\n/* harmony export */ });\n/* harmony import */ var _timeout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeout.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js\");\n\n\nconst registerQuotaErrorCallback = (callback)=>{\n    if (true) {\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(callback, \"function\", {\n            moduleName: \"@serwist/core\",\n            funcName: \"register\",\n            paramName: \"callback\"\n        });\n    }\n    _timeout_js__WEBPACK_IMPORTED_MODULE_0__.q.add(callback);\n    if (true) {\n        _timeout_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Registered a callback to respond to quota errors.\", callback);\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vc2Vyd2lzdEA5LjAuMC1wcmV2aWV3LjI0X3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL3Nlcndpc3QvZGlzdC9jaHVua3MvcmVnaXN0ZXJRdW90YUVycm9yQ2FsbGJhY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBOEY7O0FBRTlGO0FBQ0EsUUFBUSxJQUFxQztBQUM3QyxRQUFRLDBDQUFrQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxJQUFJLDBDQUFtQjtBQUN2QixRQUFRLElBQXFDO0FBQzdDLFFBQVEsMENBQU07QUFDZDtBQUNBOztBQUUyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vc2Vyd2lzdEA5LjAuMC1wcmV2aWV3LjI0X3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL3Nlcndpc3QvZGlzdC9jaHVua3MvcmVnaXN0ZXJRdW90YUVycm9yQ2FsbGJhY2suanM/NjQxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmIGFzIGZpbmFsQXNzZXJ0RXhwb3J0cywgcSBhcyBxdW90YUVycm9yQ2FsbGJhY2tzLCBsIGFzIGxvZ2dlciB9IGZyb20gJy4vdGltZW91dC5qcyc7XG5cbmNvbnN0IHJlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrID0gKGNhbGxiYWNrKT0+e1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgZmluYWxBc3NlcnRFeHBvcnRzLmlzVHlwZShjYWxsYmFjaywgXCJmdW5jdGlvblwiLCB7XG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2NvcmVcIixcbiAgICAgICAgICAgIGZ1bmNOYW1lOiBcInJlZ2lzdGVyXCIsXG4gICAgICAgICAgICBwYXJhbU5hbWU6IFwiY2FsbGJhY2tcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcXVvdGFFcnJvckNhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlZ2lzdGVyZWQgYSBjYWxsYmFjayB0byByZXNwb25kIHRvIHF1b3RhIGVycm9ycy5cIiwgY2FsbGJhY2spO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IHJlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrIGFzIHIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/registerQuotaErrorCallback.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: function() { return /* binding */ Deferred; },\n/* harmony export */   S: function() { return /* binding */ SerwistError; },\n/* harmony export */   a: function() { return /* binding */ cacheMatchIgnoreParams; },\n/* harmony export */   c: function() { return /* binding */ cacheNames; },\n/* harmony export */   e: function() { return /* binding */ executeQuotaErrorCallbacks; },\n/* harmony export */   f: function() { return /* binding */ finalAssertExports; },\n/* harmony export */   g: function() { return /* binding */ getFriendlyURL; },\n/* harmony export */   l: function() { return /* binding */ logger; },\n/* harmony export */   q: function() { return /* binding */ quotaErrorCallbacks; },\n/* harmony export */   t: function() { return /* binding */ timeout; }\n/* harmony export */ });\nconst _cacheNameDetails = {\n    googleAnalytics: \"googleAnalytics\",\n    precache: \"precache-v2\",\n    prefix: \"serwist\",\n    runtime: \"runtime\",\n    suffix: typeof registration !== \"undefined\" ? registration.scope : \"\"\n};\nconst _createCacheName = (cacheName)=>{\n    return [\n        _cacheNameDetails.prefix,\n        cacheName,\n        _cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join(\"-\");\n};\nconst eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys(_cacheNameDetails)){\n        fn(key);\n    }\n};\nconst cacheNames = {\n    updateDetails: (details)=>{\n        eachCacheNameDetail((key)=>{\n            const detail = details[key];\n            if (typeof detail === \"string\") {\n                _cacheNameDetails[key] = detail;\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return _cacheNameDetails.suffix;\n    }\n};\n\nconst logger =  false ? 0 : (()=>{\n    if (!(\"__WB_DISABLE_DEV_LOGS\" in globalThis)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: \"#7f8c8d\",\n        log: \"#2ecc71\",\n        warn: \"#f39c12\",\n        error: \"#c0392b\",\n        groupCollapsed: \"#3498db\",\n        groupEnd: null\n    };\n    const print = (method, args)=>{\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === \"groupCollapsed\") {\n            if (typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            \"border-radius: 0.5em\",\n            \"color: white\",\n            \"font-weight: bold\",\n            \"padding: 2px 0.5em\"\n        ];\n        const logPrefix = inGroup ? [] : [\n            \"%cserwist\",\n            styles.join(\";\")\n        ];\n        console[method](...logPrefix, ...args);\n        if (method === \"groupCollapsed\") {\n            inGroup = true;\n        }\n        if (method === \"groupEnd\") {\n            inGroup = false;\n        }\n    };\n    const loggerMethods = Object.keys(methodToColorMap);\n    return loggerMethods.reduce((api, method)=>{\n        api[method] = (...args)=>{\n            print(method, args);\n        };\n        return api;\n    }, {});\n})();\n\nconst messages = {\n    \"invalid-value\": ({ paramName, validValueDescription, value })=>{\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    \"not-an-array\": ({ moduleName, className, funcName, paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    \"incorrect-type\": ({ expectedType, paramName, moduleName, className, funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    \"incorrect-class\": ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        if (isReturnValueProblem) {\n            return `The return value from '${moduleName}.${classNameStr}${funcName}()' must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    \"missing-a-method\": ({ expectedMethod, paramName, moduleName, className, funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    \"add-to-cache-list-unexpected-type\": ({ entry })=>{\n        return `An unexpected entry was passed to 'serwist.Serwist.addToPrecacheList()' The entry '${JSON.stringify(entry)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`;\n    },\n    \"add-to-cache-list-conflicting-entries\": ({ firstEntry, secondEntry })=>{\n        if (!firstEntry || !secondEntry) {\n            throw new Error(\"Unexpected input to \" + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to 'serwist.Serwist.addToPrecacheList()' had the URL ${firstEntry} but different revision details. Serwist is unable to cache and version the asset correctly. Please remove one of the entries.`;\n    },\n    \"plugin-error-request-will-fetch\": ({ thrownErrorMessage })=>{\n        if (!thrownErrorMessage) {\n            throw new Error(\"Unexpected input to \" + `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugin's 'requestWillFetch()' method. The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    \"invalid-cache-name\": ({ cacheNameId, value })=>{\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for setCacheDetails({${cacheNameId}: '...'}). Received a value of '${JSON.stringify(value)}'`;\n    },\n    \"unregister-route-but-not-found-with-method\": ({ method })=>{\n        if (!method) {\n            throw new Error(\"Unexpected input to \" + `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously registered for the method type '${method}'.`;\n    },\n    \"unregister-route-route-not-registered\": ()=>{\n        return `The route you're trying to unregister was not previously ` + \"registered.\";\n    },\n    \"queue-replay-failed\": ({ name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    \"duplicate-queue-name\": ({ name })=>{\n        return `The Queue name '${name}' is already being used. All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    \"expired-test-without-max-age\": ({ methodName, paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    \"unsupported-route-type\": ({ moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. Please check the docs for ${moduleName}.${className}.${funcName} for valid input types.`;\n    },\n    \"not-array-of-class\": ({ value, expectedClass, moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of '${expectedClass}' objects. Received '${JSON.stringify(value)},'. Please check the call to ${moduleName}.${className}.${funcName}() to fix the issue.`;\n    },\n    \"max-entries-or-age-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.maxEntries' or 'config.maxAgeSeconds' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"statuses-or-headers-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.statuses' or 'config.headers' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"invalid-string\": ({ moduleName, funcName, paramName })=>{\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${moduleName}.${funcName}() for more info.`;\n    },\n    \"channel-name-required\": ()=>{\n        return \"You must provide a channelName to construct a \" + \"BroadcastCacheUpdate instance.\";\n    },\n    \"invalid-responses-are-same-args\": ()=>{\n        return \"The arguments passed into responsesAreSame() appear to be \" + \"invalid. Please ensure valid Responses are used.\";\n    },\n    \"expire-custom-caches-only\": ()=>{\n        return `You must provide a 'cacheName' property when using the ` + \"expiration plugin with a runtime caching strategy.\";\n    },\n    \"unit-must-be-bytes\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"single-range-only\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"invalid-range-values\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"no-range-header\": ()=>{\n        return \"No Range header was found in the Request provided.\";\n    },\n    \"range-not-satisfiable\": ({ size, start, end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    \"attempt-to-cache-non-get-request\": ({ url, method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and only 'GET' requests can be cached.`;\n    },\n    \"cache-put-with-no-response\": ({ url })=>{\n        return `There was an attempt to cache '${url}' but the response was not defined.`;\n    },\n    \"no-response\": ({ url, error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    \"bad-precaching-response\": ({ url, status })=>{\n        return `The precaching request for '${url}' failed${status ? ` with an HTTP status of ${status}.` : \".\"}`;\n    },\n    \"non-precached-url\": ({ url })=>{\n        return `'createHandlerBoundToURL(\"${url}\")' was called, but that URL is not precached. Please pass in a URL that is precached instead.`;\n    },\n    \"add-to-cache-list-conflicting-integrities\": ({ url })=>{\n        return `Two of the entries passed to 'serwist.Serwist.addToPrecacheList()' had the URL ${url} with different integrity values. Please remove one of them.`;\n    },\n    \"missing-precache-entry\": ({ cacheName, url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    \"cross-origin-copy-response\": ({ origin })=>{\n        return `'@serwist/core.copyResponse()' can only be used with same-origin responses. It was passed a response with origin ${origin}.`;\n    },\n    \"opaque-streams-source\": ({ type })=>{\n        const message = `One of the '@serwist/streams' sources resulted in an '${type}' response.`;\n        if (type === \"opaqueredirect\") {\n            return `${message} Please do not use a navigation request that results in a redirect as a source.`;\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\nconst fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {})=>{\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nconst messageGenerator =  false ? 0 : generatorFunction;\n\nclass SerwistError extends Error {\n    details;\n    constructor(errorCode, details){\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\nconst isArray = (value, details)=>{\n    if (!Array.isArray(value)) {\n        throw new SerwistError(\"not-an-array\", details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== \"function\") {\n        details.expectedMethod = expectedMethod;\n        throw new SerwistError(\"missing-a-method\", details);\n    }\n};\nconst isType = (object, expectedType, details)=>{\n    if (typeof object !== expectedType) {\n        details.expectedType = expectedType;\n        throw new SerwistError(\"incorrect-type\", details);\n    }\n};\nconst isInstance = (object, expectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details.expectedClassName = expectedClass.name;\n        throw new SerwistError(\"incorrect-class\", details);\n    }\n};\nconst isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details.validValueDescription = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new SerwistError(\"invalid-value\", details);\n    }\n};\nconst isArrayOfClass = (value, expectedClass, details)=>{\n    const error = new SerwistError(\"not-array-of-class\", details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value){\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports =  false ? 0 : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass\n};\n\nconst getFriendlyURL = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), \"\");\n};\n\nclass Deferred {\n    promise;\n    resolve;\n    reject;\n    constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams){\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    const keysOptions = {\n        ...matchOptions,\n        ignoreSearch: true\n    };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\n\nconst quotaErrorCallbacks = new Set();\n\nconst executeQuotaErrorCallbacks = async ()=>{\n    if (true) {\n        logger.log(`About to run ${quotaErrorCallbacks.size} callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks){\n        await callback();\n        if (true) {\n            logger.log(callback, \"is complete.\");\n        }\n    }\n    if (true) {\n        logger.log(\"Finished running callbacks.\");\n    }\n};\n\nfunction timeout(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/waitUntil.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/waitUntil.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: function() { return /* binding */ canConstructResponseFromBodyStream; },\n/* harmony export */   w: function() { return /* binding */ waitUntil; }\n/* harmony export */ });\nlet supportStatus;\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response(\"\");\n        if (\"body\" in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            } catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\n\nconst waitUntil = (event, asyncFn)=>{\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vc2Vyd2lzdEA5LjAuMC1wcmV2aWV3LjI0X3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL3Nlcndpc3QvZGlzdC9jaHVua3Mvd2FpdFVudGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vc2Vyd2lzdEA5LjAuMC1wcmV2aWV3LjI0X3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL3Nlcndpc3QvZGlzdC9jaHVua3Mvd2FpdFVudGlsLmpzPzMxYzgiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHN1cHBvcnRTdGF0dXM7XG5mdW5jdGlvbiBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtKCkge1xuICAgIGlmIChzdXBwb3J0U3RhdHVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgdGVzdFJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFwiXCIpO1xuICAgICAgICBpZiAoXCJib2R5XCIgaW4gdGVzdFJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5ldyBSZXNwb25zZSh0ZXN0UmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICAgICAgc3VwcG9ydFN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBwb3J0U3RhdHVzID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0U3RhdHVzO1xufVxuXG5jb25zdCB3YWl0VW50aWwgPSAoZXZlbnQsIGFzeW5jRm4pPT57XG4gICAgY29uc3QgcmV0dXJuUHJvbWlzZSA9IGFzeW5jRm4oKTtcbiAgICBldmVudC53YWl0VW50aWwocmV0dXJuUHJvbWlzZSk7XG4gICAgcmV0dXJuIHJldHVyblByb21pc2U7XG59O1xuXG5leHBvcnQgeyBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtIGFzIGMsIHdhaXRVbnRpbCBhcyB3IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/waitUntil.js\n"));

/***/ }),

/***/ "./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/index.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/index.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigationRoute: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.N; },\n/* harmony export */   PrecacheRoute: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.P; },\n/* harmony export */   PrecacheStrategy: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.g; },\n/* harmony export */   RegExpRoute: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.R; },\n/* harmony export */   Route: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_3__.R; },\n/* harmony export */   Serwist: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.S; },\n/* harmony export */   cacheNames: function() { return /* binding */ cacheNames; },\n/* harmony export */   cleanupOutdatedCaches: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.c; },\n/* harmony export */   clientsClaim: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.a; },\n/* harmony export */   copyResponse: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.b; },\n/* harmony export */   disableDevLogs: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.d; },\n/* harmony export */   disableNavigationPreload: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.e; },\n/* harmony export */   enableNavigationPreload: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.f; },\n/* harmony export */   isNavigationPreloadSupported: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.i; },\n/* harmony export */   parseRoute: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.p; },\n/* harmony export */   registerQuotaErrorCallback: function() { return /* reexport safe */ _chunks_registerQuotaErrorCallback_js__WEBPACK_IMPORTED_MODULE_2__.r; },\n/* harmony export */   setCacheNameDetails: function() { return /* reexport safe */ _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__.s; }\n/* harmony export */ });\n/* harmony import */ var _chunks_timeout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/timeout.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/timeout.js\");\n/* harmony import */ var _chunks_Serwist_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/Serwist.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/Serwist.js\");\n/* harmony import */ var _chunks_registerQuotaErrorCallback_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/registerQuotaErrorCallback.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/registerQuotaErrorCallback.js\");\n/* harmony import */ var _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunks/PrecacheFallbackPlugin.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/PrecacheFallbackPlugin.js\");\n/* harmony import */ var _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/waitUntil.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/waitUntil.js\");\n/* harmony import */ var _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/NetworkOnly.js */ \"./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! idb */ \"./node_modules/.pnpm/idb@8.0.0/node_modules/idb/build/index.js\");\n\n\n\n\n\n\n\n\nconst cacheNames = {\n    get googleAnalytics () {\n        return _chunks_timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getGoogleAnalyticsName();\n    },\n    get precache () {\n        return _chunks_timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrecacheName();\n    },\n    get prefix () {\n        return _chunks_timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrefix();\n    },\n    get runtime () {\n        return _chunks_timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getRuntimeName();\n    },\n    get suffix () {\n        return _chunks_timeout_js__WEBPACK_IMPORTED_MODULE_0__.c.getSuffix();\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vc2Vyd2lzdEA5LjAuMC1wcmV2aWV3LjI0X3R5cGVzY3JpcHRANS40LjUvbm9kZV9tb2R1bGVzL3Nlcndpc3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Q7QUFDZ1Q7QUFDL1E7QUFDekI7QUFDakM7QUFDRTtBQUNwQjs7QUFFYjtBQUNBO0FBQ0EsZUFBZSxpREFBWTtBQUMzQixLQUFLO0FBQ0w7QUFDQSxlQUFlLGlEQUFZO0FBQzNCLEtBQUs7QUFDTDtBQUNBLGVBQWUsaURBQVk7QUFDM0IsS0FBSztBQUNMO0FBQ0EsZUFBZSxpREFBWTtBQUMzQixLQUFLO0FBQ0w7QUFDQSxlQUFlLGlEQUFZO0FBQzNCO0FBQ0E7O0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zZXJ3aXN0QDkuMC4wLXByZXZpZXcuMjRfdHlwZXNjcmlwdEA1LjQuNS9ub2RlX21vZHVsZXMvc2Vyd2lzdC9kaXN0L2luZGV4LmpzP2U3ZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYyBhcyBjYWNoZU5hbWVzJDEgfSBmcm9tICcuL2NodW5rcy90aW1lb3V0LmpzJztcbmV4cG9ydCB7IE4gYXMgTmF2aWdhdGlvblJvdXRlLCBQIGFzIFByZWNhY2hlUm91dGUsIGcgYXMgUHJlY2FjaGVTdHJhdGVneSwgUiBhcyBSZWdFeHBSb3V0ZSwgUyBhcyBTZXJ3aXN0LCBjIGFzIGNsZWFudXBPdXRkYXRlZENhY2hlcywgYSBhcyBjbGllbnRzQ2xhaW0sIGIgYXMgY29weVJlc3BvbnNlLCBkIGFzIGRpc2FibGVEZXZMb2dzLCBlIGFzIGRpc2FibGVOYXZpZ2F0aW9uUHJlbG9hZCwgZiBhcyBlbmFibGVOYXZpZ2F0aW9uUHJlbG9hZCwgaSBhcyBpc05hdmlnYXRpb25QcmVsb2FkU3VwcG9ydGVkLCBwIGFzIHBhcnNlUm91dGUsIHMgYXMgc2V0Q2FjaGVOYW1lRGV0YWlscyB9IGZyb20gJy4vY2h1bmtzL1Nlcndpc3QuanMnO1xuZXhwb3J0IHsgciBhcyByZWdpc3RlclF1b3RhRXJyb3JDYWxsYmFjayB9IGZyb20gJy4vY2h1bmtzL3JlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrLmpzJztcbmV4cG9ydCB7IFIgYXMgUm91dGUgfSBmcm9tICcuL2NodW5rcy9QcmVjYWNoZUZhbGxiYWNrUGx1Z2luLmpzJztcbmltcG9ydCAnLi9jaHVua3Mvd2FpdFVudGlsLmpzJztcbmltcG9ydCAnLi9jaHVua3MvTmV0d29ya09ubHkuanMnO1xuaW1wb3J0ICdpZGInO1xuXG5jb25zdCBjYWNoZU5hbWVzID0ge1xuICAgIGdldCBnb29nbGVBbmFseXRpY3MgKCkge1xuICAgICAgICByZXR1cm4gY2FjaGVOYW1lcyQxLmdldEdvb2dsZUFuYWx5dGljc05hbWUoKTtcbiAgICB9LFxuICAgIGdldCBwcmVjYWNoZSAoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWVzJDEuZ2V0UHJlY2FjaGVOYW1lKCk7XG4gICAgfSxcbiAgICBnZXQgcHJlZml4ICgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlTmFtZXMkMS5nZXRQcmVmaXgoKTtcbiAgICB9LFxuICAgIGdldCBydW50aW1lICgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlTmFtZXMkMS5nZXRSdW50aW1lTmFtZSgpO1xuICAgIH0sXG4gICAgZ2V0IHN1ZmZpeCAoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWVzJDEuZ2V0U3VmZml4KCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgY2FjaGVOYW1lcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/serwist@9.0.0-preview.24_typescript@5.4.5/node_modules/serwist/dist/index.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	!function() {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = function() {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: function(script) { return script; }
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	!function() {
/******/ 		__webpack_require__.ts = function(script) { return __webpack_require__.tt().createScript(script); };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	!function() {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push(function(options) {
/******/ 			var originalFactory = options.factory;
/******/ 			options.factory = function(moduleObject, moduleExports, webpackRequire) {
/******/ 				var hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				var cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : function() {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/sw.js");
/******/ 	
/******/ })()
;